
calc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000021d8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  080022e4  080022e4  000122e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002330  08002330  0002002c  2**0
                  CONTENTS
  4 .ARM          00000000  08002330  08002330  0002002c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002330  08002330  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002330  08002330  00012330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002334  08002334  00012334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08002338  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000002c  08002364  0002002c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08002364  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007546  00000000  00000000  00020055  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001631  00000000  00000000  0002759b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006b0  00000000  00000000  00028bd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000608  00000000  00000000  00029280  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015fab  00000000  00000000  00029888  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007b67  00000000  00000000  0003f833  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007e42a  00000000  00000000  0004739a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c57c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001990  00000000  00000000  000c5818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000002c 	.word	0x2000002c
 8000128:	00000000 	.word	0x00000000
 800012c:	080022cc 	.word	0x080022cc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000030 	.word	0x20000030
 8000148:	080022cc 	.word	0x080022cc

0800014c <__aeabi_frsub>:
 800014c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000150:	e002      	b.n	8000158 <__addsf3>
 8000152:	bf00      	nop

08000154 <__aeabi_fsub>:
 8000154:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000158 <__addsf3>:
 8000158:	0042      	lsls	r2, r0, #1
 800015a:	bf1f      	itttt	ne
 800015c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000160:	ea92 0f03 	teqne	r2, r3
 8000164:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000168:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800016c:	d06a      	beq.n	8000244 <__addsf3+0xec>
 800016e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000172:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000176:	bfc1      	itttt	gt
 8000178:	18d2      	addgt	r2, r2, r3
 800017a:	4041      	eorgt	r1, r0
 800017c:	4048      	eorgt	r0, r1
 800017e:	4041      	eorgt	r1, r0
 8000180:	bfb8      	it	lt
 8000182:	425b      	neglt	r3, r3
 8000184:	2b19      	cmp	r3, #25
 8000186:	bf88      	it	hi
 8000188:	4770      	bxhi	lr
 800018a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 800018e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000192:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000196:	bf18      	it	ne
 8000198:	4240      	negne	r0, r0
 800019a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800019e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80001a2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80001a6:	bf18      	it	ne
 80001a8:	4249      	negne	r1, r1
 80001aa:	ea92 0f03 	teq	r2, r3
 80001ae:	d03f      	beq.n	8000230 <__addsf3+0xd8>
 80001b0:	f1a2 0201 	sub.w	r2, r2, #1
 80001b4:	fa41 fc03 	asr.w	ip, r1, r3
 80001b8:	eb10 000c 	adds.w	r0, r0, ip
 80001bc:	f1c3 0320 	rsb	r3, r3, #32
 80001c0:	fa01 f103 	lsl.w	r1, r1, r3
 80001c4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80001c8:	d502      	bpl.n	80001d0 <__addsf3+0x78>
 80001ca:	4249      	negs	r1, r1
 80001cc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80001d4:	d313      	bcc.n	80001fe <__addsf3+0xa6>
 80001d6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80001da:	d306      	bcc.n	80001ea <__addsf3+0x92>
 80001dc:	0840      	lsrs	r0, r0, #1
 80001de:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e2:	f102 0201 	add.w	r2, r2, #1
 80001e6:	2afe      	cmp	r2, #254	; 0xfe
 80001e8:	d251      	bcs.n	800028e <__addsf3+0x136>
 80001ea:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 80001ee:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f2:	bf08      	it	eq
 80001f4:	f020 0001 	biceq.w	r0, r0, #1
 80001f8:	ea40 0003 	orr.w	r0, r0, r3
 80001fc:	4770      	bx	lr
 80001fe:	0049      	lsls	r1, r1, #1
 8000200:	eb40 0000 	adc.w	r0, r0, r0
 8000204:	3a01      	subs	r2, #1
 8000206:	bf28      	it	cs
 8000208:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 800020c:	d2ed      	bcs.n	80001ea <__addsf3+0x92>
 800020e:	fab0 fc80 	clz	ip, r0
 8000212:	f1ac 0c08 	sub.w	ip, ip, #8
 8000216:	ebb2 020c 	subs.w	r2, r2, ip
 800021a:	fa00 f00c 	lsl.w	r0, r0, ip
 800021e:	bfaa      	itet	ge
 8000220:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000224:	4252      	neglt	r2, r2
 8000226:	4318      	orrge	r0, r3
 8000228:	bfbc      	itt	lt
 800022a:	40d0      	lsrlt	r0, r2
 800022c:	4318      	orrlt	r0, r3
 800022e:	4770      	bx	lr
 8000230:	f092 0f00 	teq	r2, #0
 8000234:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000238:	bf06      	itte	eq
 800023a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 800023e:	3201      	addeq	r2, #1
 8000240:	3b01      	subne	r3, #1
 8000242:	e7b5      	b.n	80001b0 <__addsf3+0x58>
 8000244:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000248:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 800024c:	bf18      	it	ne
 800024e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000252:	d021      	beq.n	8000298 <__addsf3+0x140>
 8000254:	ea92 0f03 	teq	r2, r3
 8000258:	d004      	beq.n	8000264 <__addsf3+0x10c>
 800025a:	f092 0f00 	teq	r2, #0
 800025e:	bf08      	it	eq
 8000260:	4608      	moveq	r0, r1
 8000262:	4770      	bx	lr
 8000264:	ea90 0f01 	teq	r0, r1
 8000268:	bf1c      	itt	ne
 800026a:	2000      	movne	r0, #0
 800026c:	4770      	bxne	lr
 800026e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000272:	d104      	bne.n	800027e <__addsf3+0x126>
 8000274:	0040      	lsls	r0, r0, #1
 8000276:	bf28      	it	cs
 8000278:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000282:	bf3c      	itt	cc
 8000284:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000288:	4770      	bxcc	lr
 800028a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800028e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000292:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000296:	4770      	bx	lr
 8000298:	ea7f 6222 	mvns.w	r2, r2, asr #24
 800029c:	bf16      	itet	ne
 800029e:	4608      	movne	r0, r1
 80002a0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a4:	4601      	movne	r1, r0
 80002a6:	0242      	lsls	r2, r0, #9
 80002a8:	bf06      	itte	eq
 80002aa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002ae:	ea90 0f01 	teqeq	r0, r1
 80002b2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_ui2f>:
 80002b8:	f04f 0300 	mov.w	r3, #0
 80002bc:	e004      	b.n	80002c8 <__aeabi_i2f+0x8>
 80002be:	bf00      	nop

080002c0 <__aeabi_i2f>:
 80002c0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80002c4:	bf48      	it	mi
 80002c6:	4240      	negmi	r0, r0
 80002c8:	ea5f 0c00 	movs.w	ip, r0
 80002cc:	bf08      	it	eq
 80002ce:	4770      	bxeq	lr
 80002d0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80002d4:	4601      	mov	r1, r0
 80002d6:	f04f 0000 	mov.w	r0, #0
 80002da:	e01c      	b.n	8000316 <__aeabi_l2f+0x2a>

080002dc <__aeabi_ul2f>:
 80002dc:	ea50 0201 	orrs.w	r2, r0, r1
 80002e0:	bf08      	it	eq
 80002e2:	4770      	bxeq	lr
 80002e4:	f04f 0300 	mov.w	r3, #0
 80002e8:	e00a      	b.n	8000300 <__aeabi_l2f+0x14>
 80002ea:	bf00      	nop

080002ec <__aeabi_l2f>:
 80002ec:	ea50 0201 	orrs.w	r2, r0, r1
 80002f0:	bf08      	it	eq
 80002f2:	4770      	bxeq	lr
 80002f4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 80002f8:	d502      	bpl.n	8000300 <__aeabi_l2f+0x14>
 80002fa:	4240      	negs	r0, r0
 80002fc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000300:	ea5f 0c01 	movs.w	ip, r1
 8000304:	bf02      	ittt	eq
 8000306:	4684      	moveq	ip, r0
 8000308:	4601      	moveq	r1, r0
 800030a:	2000      	moveq	r0, #0
 800030c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000310:	bf08      	it	eq
 8000312:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000316:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800031a:	fabc f28c 	clz	r2, ip
 800031e:	3a08      	subs	r2, #8
 8000320:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000324:	db10      	blt.n	8000348 <__aeabi_l2f+0x5c>
 8000326:	fa01 fc02 	lsl.w	ip, r1, r2
 800032a:	4463      	add	r3, ip
 800032c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000330:	f1c2 0220 	rsb	r2, r2, #32
 8000334:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000338:	fa20 f202 	lsr.w	r2, r0, r2
 800033c:	eb43 0002 	adc.w	r0, r3, r2
 8000340:	bf08      	it	eq
 8000342:	f020 0001 	biceq.w	r0, r0, #1
 8000346:	4770      	bx	lr
 8000348:	f102 0220 	add.w	r2, r2, #32
 800034c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000350:	f1c2 0220 	rsb	r2, r2, #32
 8000354:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000358:	fa21 f202 	lsr.w	r2, r1, r2
 800035c:	eb43 0002 	adc.w	r0, r3, r2
 8000360:	bf08      	it	eq
 8000362:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000366:	4770      	bx	lr

08000368 <__aeabi_fmul>:
 8000368:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800036c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000370:	bf1e      	ittt	ne
 8000372:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000376:	ea92 0f0c 	teqne	r2, ip
 800037a:	ea93 0f0c 	teqne	r3, ip
 800037e:	d06f      	beq.n	8000460 <__aeabi_fmul+0xf8>
 8000380:	441a      	add	r2, r3
 8000382:	ea80 0c01 	eor.w	ip, r0, r1
 8000386:	0240      	lsls	r0, r0, #9
 8000388:	bf18      	it	ne
 800038a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 800038e:	d01e      	beq.n	80003ce <__aeabi_fmul+0x66>
 8000390:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000394:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000398:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 800039c:	fba0 3101 	umull	r3, r1, r0, r1
 80003a0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80003a4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80003a8:	bf3e      	ittt	cc
 80003aa:	0049      	lslcc	r1, r1, #1
 80003ac:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b0:	005b      	lslcc	r3, r3, #1
 80003b2:	ea40 0001 	orr.w	r0, r0, r1
 80003b6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80003ba:	2afd      	cmp	r2, #253	; 0xfd
 80003bc:	d81d      	bhi.n	80003fa <__aeabi_fmul+0x92>
 80003be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80003c2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003c6:	bf08      	it	eq
 80003c8:	f020 0001 	biceq.w	r0, r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	f090 0f00 	teq	r0, #0
 80003d2:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80003d6:	bf08      	it	eq
 80003d8:	0249      	lsleq	r1, r1, #9
 80003da:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003de:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e2:	3a7f      	subs	r2, #127	; 0x7f
 80003e4:	bfc2      	ittt	gt
 80003e6:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80003ea:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003ee:	4770      	bxgt	lr
 80003f0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80003f4:	f04f 0300 	mov.w	r3, #0
 80003f8:	3a01      	subs	r2, #1
 80003fa:	dc5d      	bgt.n	80004b8 <__aeabi_fmul+0x150>
 80003fc:	f112 0f19 	cmn.w	r2, #25
 8000400:	bfdc      	itt	le
 8000402:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000406:	4770      	bxle	lr
 8000408:	f1c2 0200 	rsb	r2, r2, #0
 800040c:	0041      	lsls	r1, r0, #1
 800040e:	fa21 f102 	lsr.w	r1, r1, r2
 8000412:	f1c2 0220 	rsb	r2, r2, #32
 8000416:	fa00 fc02 	lsl.w	ip, r0, r2
 800041a:	ea5f 0031 	movs.w	r0, r1, rrx
 800041e:	f140 0000 	adc.w	r0, r0, #0
 8000422:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000426:	bf08      	it	eq
 8000428:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800042c:	4770      	bx	lr
 800042e:	f092 0f00 	teq	r2, #0
 8000432:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000436:	bf02      	ittt	eq
 8000438:	0040      	lsleq	r0, r0, #1
 800043a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800043e:	3a01      	subeq	r2, #1
 8000440:	d0f9      	beq.n	8000436 <__aeabi_fmul+0xce>
 8000442:	ea40 000c 	orr.w	r0, r0, ip
 8000446:	f093 0f00 	teq	r3, #0
 800044a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800044e:	bf02      	ittt	eq
 8000450:	0049      	lsleq	r1, r1, #1
 8000452:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000456:	3b01      	subeq	r3, #1
 8000458:	d0f9      	beq.n	800044e <__aeabi_fmul+0xe6>
 800045a:	ea41 010c 	orr.w	r1, r1, ip
 800045e:	e78f      	b.n	8000380 <__aeabi_fmul+0x18>
 8000460:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000464:	ea92 0f0c 	teq	r2, ip
 8000468:	bf18      	it	ne
 800046a:	ea93 0f0c 	teqne	r3, ip
 800046e:	d00a      	beq.n	8000486 <__aeabi_fmul+0x11e>
 8000470:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000474:	bf18      	it	ne
 8000476:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800047a:	d1d8      	bne.n	800042e <__aeabi_fmul+0xc6>
 800047c:	ea80 0001 	eor.w	r0, r0, r1
 8000480:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000484:	4770      	bx	lr
 8000486:	f090 0f00 	teq	r0, #0
 800048a:	bf17      	itett	ne
 800048c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000490:	4608      	moveq	r0, r1
 8000492:	f091 0f00 	teqne	r1, #0
 8000496:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 800049a:	d014      	beq.n	80004c6 <__aeabi_fmul+0x15e>
 800049c:	ea92 0f0c 	teq	r2, ip
 80004a0:	d101      	bne.n	80004a6 <__aeabi_fmul+0x13e>
 80004a2:	0242      	lsls	r2, r0, #9
 80004a4:	d10f      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004a6:	ea93 0f0c 	teq	r3, ip
 80004aa:	d103      	bne.n	80004b4 <__aeabi_fmul+0x14c>
 80004ac:	024b      	lsls	r3, r1, #9
 80004ae:	bf18      	it	ne
 80004b0:	4608      	movne	r0, r1
 80004b2:	d108      	bne.n	80004c6 <__aeabi_fmul+0x15e>
 80004b4:	ea80 0001 	eor.w	r0, r0, r1
 80004b8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80004bc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004c0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80004c4:	4770      	bx	lr
 80004c6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80004ca:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80004ce:	4770      	bx	lr

080004d0 <__aeabi_fdiv>:
 80004d0:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004d4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004d8:	bf1e      	ittt	ne
 80004da:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004de:	ea92 0f0c 	teqne	r2, ip
 80004e2:	ea93 0f0c 	teqne	r3, ip
 80004e6:	d069      	beq.n	80005bc <__aeabi_fdiv+0xec>
 80004e8:	eba2 0203 	sub.w	r2, r2, r3
 80004ec:	ea80 0c01 	eor.w	ip, r0, r1
 80004f0:	0249      	lsls	r1, r1, #9
 80004f2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004f6:	d037      	beq.n	8000568 <__aeabi_fdiv+0x98>
 80004f8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80004fc:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000500:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000504:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000508:	428b      	cmp	r3, r1
 800050a:	bf38      	it	cc
 800050c:	005b      	lslcc	r3, r3, #1
 800050e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000512:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000516:	428b      	cmp	r3, r1
 8000518:	bf24      	itt	cs
 800051a:	1a5b      	subcs	r3, r3, r1
 800051c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000520:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000524:	bf24      	itt	cs
 8000526:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 800052e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000532:	bf24      	itt	cs
 8000534:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000538:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800053c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000540:	bf24      	itt	cs
 8000542:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000546:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	bf18      	it	ne
 800054e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000552:	d1e0      	bne.n	8000516 <__aeabi_fdiv+0x46>
 8000554:	2afd      	cmp	r2, #253	; 0xfd
 8000556:	f63f af50 	bhi.w	80003fa <__aeabi_fmul+0x92>
 800055a:	428b      	cmp	r3, r1
 800055c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000560:	bf08      	it	eq
 8000562:	f020 0001 	biceq.w	r0, r0, #1
 8000566:	4770      	bx	lr
 8000568:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800056c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000570:	327f      	adds	r2, #127	; 0x7f
 8000572:	bfc2      	ittt	gt
 8000574:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000578:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 800057c:	4770      	bxgt	lr
 800057e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000582:	f04f 0300 	mov.w	r3, #0
 8000586:	3a01      	subs	r2, #1
 8000588:	e737      	b.n	80003fa <__aeabi_fmul+0x92>
 800058a:	f092 0f00 	teq	r2, #0
 800058e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000592:	bf02      	ittt	eq
 8000594:	0040      	lsleq	r0, r0, #1
 8000596:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 800059a:	3a01      	subeq	r2, #1
 800059c:	d0f9      	beq.n	8000592 <__aeabi_fdiv+0xc2>
 800059e:	ea40 000c 	orr.w	r0, r0, ip
 80005a2:	f093 0f00 	teq	r3, #0
 80005a6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80005aa:	bf02      	ittt	eq
 80005ac:	0049      	lsleq	r1, r1, #1
 80005ae:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80005b2:	3b01      	subeq	r3, #1
 80005b4:	d0f9      	beq.n	80005aa <__aeabi_fdiv+0xda>
 80005b6:	ea41 010c 	orr.w	r1, r1, ip
 80005ba:	e795      	b.n	80004e8 <__aeabi_fdiv+0x18>
 80005bc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c0:	ea92 0f0c 	teq	r2, ip
 80005c4:	d108      	bne.n	80005d8 <__aeabi_fdiv+0x108>
 80005c6:	0242      	lsls	r2, r0, #9
 80005c8:	f47f af7d 	bne.w	80004c6 <__aeabi_fmul+0x15e>
 80005cc:	ea93 0f0c 	teq	r3, ip
 80005d0:	f47f af70 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005d4:	4608      	mov	r0, r1
 80005d6:	e776      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005d8:	ea93 0f0c 	teq	r3, ip
 80005dc:	d104      	bne.n	80005e8 <__aeabi_fdiv+0x118>
 80005de:	024b      	lsls	r3, r1, #9
 80005e0:	f43f af4c 	beq.w	800047c <__aeabi_fmul+0x114>
 80005e4:	4608      	mov	r0, r1
 80005e6:	e76e      	b.n	80004c6 <__aeabi_fmul+0x15e>
 80005e8:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 80005ec:	bf18      	it	ne
 80005ee:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 80005f2:	d1ca      	bne.n	800058a <__aeabi_fdiv+0xba>
 80005f4:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 80005f8:	f47f af5c 	bne.w	80004b4 <__aeabi_fmul+0x14c>
 80005fc:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000600:	f47f af3c 	bne.w	800047c <__aeabi_fmul+0x114>
 8000604:	e75f      	b.n	80004c6 <__aeabi_fmul+0x15e>
 8000606:	bf00      	nop

08000608 <__aeabi_f2iz>:
 8000608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 800060c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000610:	d30f      	bcc.n	8000632 <__aeabi_f2iz+0x2a>
 8000612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800061a:	d90d      	bls.n	8000638 <__aeabi_f2iz+0x30>
 800061c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000628:	fa23 f002 	lsr.w	r0, r3, r2
 800062c:	bf18      	it	ne
 800062e:	4240      	negne	r0, r0
 8000630:	4770      	bx	lr
 8000632:	f04f 0000 	mov.w	r0, #0
 8000636:	4770      	bx	lr
 8000638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800063c:	d101      	bne.n	8000642 <__aeabi_f2iz+0x3a>
 800063e:	0242      	lsls	r2, r0, #9
 8000640:	d105      	bne.n	800064e <__aeabi_f2iz+0x46>
 8000642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000646:	bf08      	it	eq
 8000648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800064c:	4770      	bx	lr
 800064e:	f04f 0000 	mov.w	r0, #0
 8000652:	4770      	bx	lr

08000654 <divByZeroError>:
 *  Created on: May 5, 2024
 *      Author: abdot
 */
#include"Error_handling.h"
unsigned char divByZeroError(unsigned char oprand2,unsigned char opration)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	4603      	mov	r3, r0
 800065c:	460a      	mov	r2, r1
 800065e:	71fb      	strb	r3, [r7, #7]
 8000660:	4613      	mov	r3, r2
 8000662:	71bb      	strb	r3, [r7, #6]
    if (opration =='/' && oprand2 == 0)
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	2b2f      	cmp	r3, #47	; 0x2f
 8000668:	d104      	bne.n	8000674 <divByZeroError+0x20>
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <divByZeroError+0x20>
    {
        return 10;
 8000670:	230a      	movs	r3, #10
 8000672:	e000      	b.n	8000676 <divByZeroError+0x22>
    }
    return 0;
 8000674:	2300      	movs	r3, #0
}
 8000676:	4618      	mov	r0, r3
 8000678:	370c      	adds	r7, #12
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr

08000680 <invldOpr>:
unsigned char invldOpr(unsigned char dig1,unsigned char dig2,unsigned char dig3)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
 800068a:	460b      	mov	r3, r1
 800068c:	71bb      	strb	r3, [r7, #6]
 800068e:	4613      	mov	r3, r2
 8000690:	717b      	strb	r3, [r7, #5]
    if (dig1<0x30 || dig2<0x30 || dig3<0x30 || dig1>0x39 || dig2>0x39 || dig3>0x39)
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	2b2f      	cmp	r3, #47	; 0x2f
 8000696:	d90e      	bls.n	80006b6 <invldOpr+0x36>
 8000698:	79bb      	ldrb	r3, [r7, #6]
 800069a:	2b2f      	cmp	r3, #47	; 0x2f
 800069c:	d90b      	bls.n	80006b6 <invldOpr+0x36>
 800069e:	797b      	ldrb	r3, [r7, #5]
 80006a0:	2b2f      	cmp	r3, #47	; 0x2f
 80006a2:	d908      	bls.n	80006b6 <invldOpr+0x36>
 80006a4:	79fb      	ldrb	r3, [r7, #7]
 80006a6:	2b39      	cmp	r3, #57	; 0x39
 80006a8:	d805      	bhi.n	80006b6 <invldOpr+0x36>
 80006aa:	79bb      	ldrb	r3, [r7, #6]
 80006ac:	2b39      	cmp	r3, #57	; 0x39
 80006ae:	d802      	bhi.n	80006b6 <invldOpr+0x36>
 80006b0:	797b      	ldrb	r3, [r7, #5]
 80006b2:	2b39      	cmp	r3, #57	; 0x39
 80006b4:	d901      	bls.n	80006ba <invldOpr+0x3a>
    {
        return 10;
 80006b6:	230a      	movs	r3, #10
 80006b8:	e000      	b.n	80006bc <invldOpr+0x3c>
    }
    else
    return 0;
 80006ba:	2300      	movs	r3, #0

}
 80006bc:	4618      	mov	r0, r3
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bc80      	pop	{r7}
 80006c4:	4770      	bx	lr

080006c6 <invldOpration>:
unsigned char invldOpration(unsigned char oprator)
{
 80006c6:	b480      	push	{r7}
 80006c8:	b083      	sub	sp, #12
 80006ca:	af00      	add	r7, sp, #0
 80006cc:	4603      	mov	r3, r0
 80006ce:	71fb      	strb	r3, [r7, #7]
    if (oprator<'*'|| oprator>'/')
 80006d0:	79fb      	ldrb	r3, [r7, #7]
 80006d2:	2b29      	cmp	r3, #41	; 0x29
 80006d4:	d902      	bls.n	80006dc <invldOpration+0x16>
 80006d6:	79fb      	ldrb	r3, [r7, #7]
 80006d8:	2b2f      	cmp	r3, #47	; 0x2f
 80006da:	d901      	bls.n	80006e0 <invldOpration+0x1a>
    {
        return 10;
 80006dc:	230a      	movs	r3, #10
 80006de:	e000      	b.n	80006e2 <invldOpration+0x1c>
    }
    else
    return 0;
 80006e0:	2300      	movs	r3, #0

}
 80006e2:	4618      	mov	r0, r3
 80006e4:	370c      	adds	r7, #12
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr

080006ec <DELAY>:
void DELAY(unsigned int time)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
    unsigned int I,J;
    for(I=0;I<time;I++)
 80006f4:	2300      	movs	r3, #0
 80006f6:	60fb      	str	r3, [r7, #12]
 80006f8:	e00d      	b.n	8000716 <DELAY+0x2a>
    for(J=0;J<1275;J++);
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	e002      	b.n	8000706 <DELAY+0x1a>
 8000700:	68bb      	ldr	r3, [r7, #8]
 8000702:	3301      	adds	r3, #1
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
 8000708:	f240 42fa 	movw	r2, #1274	; 0x4fa
 800070c:	4293      	cmp	r3, r2
 800070e:	d9f7      	bls.n	8000700 <DELAY+0x14>
    for(I=0;I<time;I++)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fa      	ldr	r2, [r7, #12]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	429a      	cmp	r2, r3
 800071c:	d3ed      	bcc.n	80006fa <DELAY+0xe>
}
 800071e:	bf00      	nop
 8000720:	bf00      	nop
 8000722:	3714      	adds	r7, #20
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <ArithFunc>:
 *      Author: abdot
 */
#include "arith_func.h"

void ArithFunc(float num1, char op, float num2, int *Dicemal_Part_ptr, int *Floating_Part_ptr)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b086      	sub	sp, #24
 8000730:	af00      	add	r7, sp, #0
 8000732:	60f8      	str	r0, [r7, #12]
 8000734:	607a      	str	r2, [r7, #4]
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	460b      	mov	r3, r1
 800073a:	72fb      	strb	r3, [r7, #11]
	float result, float_part;
	switch (op)
 800073c:	7afb      	ldrb	r3, [r7, #11]
 800073e:	3b2a      	subs	r3, #42	; 0x2a
 8000740:	2b05      	cmp	r3, #5
 8000742:	d82b      	bhi.n	800079c <ArithFunc+0x70>
 8000744:	a201      	add	r2, pc, #4	; (adr r2, 800074c <ArithFunc+0x20>)
 8000746:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800074a:	bf00      	nop
 800074c:	08000781 	.word	0x08000781
 8000750:	08000765 	.word	0x08000765
 8000754:	0800079d 	.word	0x0800079d
 8000758:	08000773 	.word	0x08000773
 800075c:	0800079d 	.word	0x0800079d
 8000760:	0800078f 	.word	0x0800078f
	{
		case '+' : // addition
		{
			result = num1 + num2;
 8000764:	6879      	ldr	r1, [r7, #4]
 8000766:	68f8      	ldr	r0, [r7, #12]
 8000768:	f7ff fcf6 	bl	8000158 <__addsf3>
 800076c:	4603      	mov	r3, r0
 800076e:	617b      	str	r3, [r7, #20]
			break;
 8000770:	e014      	b.n	800079c <ArithFunc+0x70>
		}

		case '-' : // subtraction
		{
			result = num1 - num2;
 8000772:	6879      	ldr	r1, [r7, #4]
 8000774:	68f8      	ldr	r0, [r7, #12]
 8000776:	f7ff fced 	bl	8000154 <__aeabi_fsub>
 800077a:	4603      	mov	r3, r0
 800077c:	617b      	str	r3, [r7, #20]
			break;
 800077e:	e00d      	b.n	800079c <ArithFunc+0x70>
		}

		case '*' : // mul
		{
			result = num1 * num2;
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	68f8      	ldr	r0, [r7, #12]
 8000784:	f7ff fdf0 	bl	8000368 <__aeabi_fmul>
 8000788:	4603      	mov	r3, r0
 800078a:	617b      	str	r3, [r7, #20]
			break;
 800078c:	e006      	b.n	800079c <ArithFunc+0x70>
		}

		case '/' : // div
		{
			result = num1 / num2;
 800078e:	6879      	ldr	r1, [r7, #4]
 8000790:	68f8      	ldr	r0, [r7, #12]
 8000792:	f7ff fe9d 	bl	80004d0 <__aeabi_fdiv>
 8000796:	4603      	mov	r3, r0
 8000798:	617b      	str	r3, [r7, #20]
			break;
 800079a:	bf00      	nop
		}
	}
	*Dicemal_Part_ptr = (int) result;
 800079c:	6978      	ldr	r0, [r7, #20]
 800079e:	f7ff ff33 	bl	8000608 <__aeabi_f2iz>
 80007a2:	4602      	mov	r2, r0
 80007a4:	683b      	ldr	r3, [r7, #0]
 80007a6:	601a      	str	r2, [r3, #0]
	float_part = (result-*Dicemal_Part_ptr);
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4618      	mov	r0, r3
 80007ae:	f7ff fd87 	bl	80002c0 <__aeabi_i2f>
 80007b2:	4603      	mov	r3, r0
 80007b4:	4619      	mov	r1, r3
 80007b6:	6978      	ldr	r0, [r7, #20]
 80007b8:	f7ff fccc 	bl	8000154 <__aeabi_fsub>
 80007bc:	4603      	mov	r3, r0
 80007be:	613b      	str	r3, [r7, #16]
	float_part = (float_part*1000);
 80007c0:	4907      	ldr	r1, [pc, #28]	; (80007e0 <ArithFunc+0xb4>)
 80007c2:	6938      	ldr	r0, [r7, #16]
 80007c4:	f7ff fdd0 	bl	8000368 <__aeabi_fmul>
 80007c8:	4603      	mov	r3, r0
 80007ca:	613b      	str	r3, [r7, #16]
	*Floating_Part_ptr = (int) float_part;
 80007cc:	6938      	ldr	r0, [r7, #16]
 80007ce:	f7ff ff1b 	bl	8000608 <__aeabi_f2iz>
 80007d2:	4602      	mov	r2, r0
 80007d4:	6a3b      	ldr	r3, [r7, #32]
 80007d6:	601a      	str	r2, [r3, #0]

}
 80007d8:	bf00      	nop
 80007da:	3718      	adds	r7, #24
 80007dc:	46bd      	mov	sp, r7
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	447a0000 	.word	0x447a0000

080007e4 <hex_to_dec>:
 *      Author: abdot
 */
#include"conversion.h"

int hex_to_dec(unsigned char dig_1,unsigned char dig_2,unsigned char dig_3)
{
 80007e4:	b480      	push	{r7}
 80007e6:	b085      	sub	sp, #20
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	71fb      	strb	r3, [r7, #7]
 80007ee:	460b      	mov	r3, r1
 80007f0:	71bb      	strb	r3, [r7, #6]
 80007f2:	4613      	mov	r3, r2
 80007f4:	717b      	strb	r3, [r7, #5]
    int dec_num;
    dig_1=(dig_1-'0');
 80007f6:	79fb      	ldrb	r3, [r7, #7]
 80007f8:	3b30      	subs	r3, #48	; 0x30
 80007fa:	71fb      	strb	r3, [r7, #7]
    dig_2=(dig_2-'0');
 80007fc:	79bb      	ldrb	r3, [r7, #6]
 80007fe:	3b30      	subs	r3, #48	; 0x30
 8000800:	71bb      	strb	r3, [r7, #6]
    dig_3=(dig_3-'0');
 8000802:	797b      	ldrb	r3, [r7, #5]
 8000804:	3b30      	subs	r3, #48	; 0x30
 8000806:	717b      	strb	r3, [r7, #5]
    dec_num=(dig_1*100)+(dig_2*10)+dig_3;
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	2264      	movs	r2, #100	; 0x64
 800080c:	fb02 f103 	mul.w	r1, r2, r3
 8000810:	79ba      	ldrb	r2, [r7, #6]
 8000812:	4613      	mov	r3, r2
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	4413      	add	r3, r2
 8000818:	005b      	lsls	r3, r3, #1
 800081a:	18ca      	adds	r2, r1, r3
 800081c:	797b      	ldrb	r3, [r7, #5]
 800081e:	4413      	add	r3, r2
 8000820:	60fb      	str	r3, [r7, #12]
    return dec_num;
 8000822:	68fb      	ldr	r3, [r7, #12]
}
 8000824:	4618      	mov	r0, r3
 8000826:	3714      	adds	r7, #20
 8000828:	46bd      	mov	sp, r7
 800082a:	bc80      	pop	{r7}
 800082c:	4770      	bx	lr
	...

08000830 <dec_to_hex>:

void dec_to_hex(int dec,unsigned char *hex)
{
 8000830:	b480      	push	{r7}
 8000832:	b085      	sub	sp, #20
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	6039      	str	r1, [r7, #0]
    unsigned char x;
    for(x=0;x<=2;x++)
 800083a:	2300      	movs	r3, #0
 800083c:	73fb      	strb	r3, [r7, #15]
 800083e:	e020      	b.n	8000882 <dec_to_hex+0x52>
    {
        hex[2-x]=(dec%10)+'0';
 8000840:	687a      	ldr	r2, [r7, #4]
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <dec_to_hex+0x64>)
 8000844:	fb83 1302 	smull	r1, r3, r3, r2
 8000848:	1099      	asrs	r1, r3, #2
 800084a:	17d3      	asrs	r3, r2, #31
 800084c:	1ac9      	subs	r1, r1, r3
 800084e:	460b      	mov	r3, r1
 8000850:	009b      	lsls	r3, r3, #2
 8000852:	440b      	add	r3, r1
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	1ad1      	subs	r1, r2, r3
 8000858:	b2ca      	uxtb	r2, r1
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	f1c3 0302 	rsb	r3, r3, #2
 8000860:	4619      	mov	r1, r3
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	440b      	add	r3, r1
 8000866:	3230      	adds	r2, #48	; 0x30
 8000868:	b2d2      	uxtb	r2, r2
 800086a:	701a      	strb	r2, [r3, #0]
        dec/=10;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	4a09      	ldr	r2, [pc, #36]	; (8000894 <dec_to_hex+0x64>)
 8000870:	fb82 1203 	smull	r1, r2, r2, r3
 8000874:	1092      	asrs	r2, r2, #2
 8000876:	17db      	asrs	r3, r3, #31
 8000878:	1ad3      	subs	r3, r2, r3
 800087a:	607b      	str	r3, [r7, #4]
    for(x=0;x<=2;x++)
 800087c:	7bfb      	ldrb	r3, [r7, #15]
 800087e:	3301      	adds	r3, #1
 8000880:	73fb      	strb	r3, [r7, #15]
 8000882:	7bfb      	ldrb	r3, [r7, #15]
 8000884:	2b02      	cmp	r3, #2
 8000886:	d9db      	bls.n	8000840 <dec_to_hex+0x10>
    }


}
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	3714      	adds	r7, #20
 800088e:	46bd      	mov	sp, r7
 8000890:	bc80      	pop	{r7}
 8000892:	4770      	bx	lr
 8000894:	66666667 	.word	0x66666667

08000898 <dec_to_hex_dec>:
void dec_to_hex_dec(int dec,unsigned char *hex,unsigned char *size)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
    int s=dec;
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	61fb      	str	r3, [r7, #28]
    int cnt=0;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    while(s!=0)//cnt=number of digits
 80008ac:	e00a      	b.n	80008c4 <dec_to_hex_dec+0x2c>
    {
        cnt++;
 80008ae:	69bb      	ldr	r3, [r7, #24]
 80008b0:	3301      	adds	r3, #1
 80008b2:	61bb      	str	r3, [r7, #24]
        s/=10;
 80008b4:	69fb      	ldr	r3, [r7, #28]
 80008b6:	4a1d      	ldr	r2, [pc, #116]	; (800092c <dec_to_hex_dec+0x94>)
 80008b8:	fb82 1203 	smull	r1, r2, r2, r3
 80008bc:	1092      	asrs	r2, r2, #2
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	61fb      	str	r3, [r7, #28]
    while(s!=0)//cnt=number of digits
 80008c4:	69fb      	ldr	r3, [r7, #28]
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d1f1      	bne.n	80008ae <dec_to_hex_dec+0x16>
    }
    unsigned char x;
    for(x=0;x<cnt;x++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	75fb      	strb	r3, [r7, #23]
 80008ce:	e020      	b.n	8000912 <dec_to_hex_dec+0x7a>
    {
        hex[cnt-x]=(dec%10)+'0';
 80008d0:	68fa      	ldr	r2, [r7, #12]
 80008d2:	4b16      	ldr	r3, [pc, #88]	; (800092c <dec_to_hex_dec+0x94>)
 80008d4:	fb83 1302 	smull	r1, r3, r3, r2
 80008d8:	1099      	asrs	r1, r3, #2
 80008da:	17d3      	asrs	r3, r2, #31
 80008dc:	1ac9      	subs	r1, r1, r3
 80008de:	460b      	mov	r3, r1
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	440b      	add	r3, r1
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	1ad1      	subs	r1, r2, r3
 80008e8:	b2ca      	uxtb	r2, r1
 80008ea:	7dfb      	ldrb	r3, [r7, #23]
 80008ec:	69b9      	ldr	r1, [r7, #24]
 80008ee:	1acb      	subs	r3, r1, r3
 80008f0:	4619      	mov	r1, r3
 80008f2:	68bb      	ldr	r3, [r7, #8]
 80008f4:	440b      	add	r3, r1
 80008f6:	3230      	adds	r2, #48	; 0x30
 80008f8:	b2d2      	uxtb	r2, r2
 80008fa:	701a      	strb	r2, [r3, #0]
        dec/=10;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <dec_to_hex_dec+0x94>)
 8000900:	fb82 1203 	smull	r1, r2, r2, r3
 8000904:	1092      	asrs	r2, r2, #2
 8000906:	17db      	asrs	r3, r3, #31
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	60fb      	str	r3, [r7, #12]
    for(x=0;x<cnt;x++)
 800090c:	7dfb      	ldrb	r3, [r7, #23]
 800090e:	3301      	adds	r3, #1
 8000910:	75fb      	strb	r3, [r7, #23]
 8000912:	7dfb      	ldrb	r3, [r7, #23]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	429a      	cmp	r2, r3
 8000918:	dcda      	bgt.n	80008d0 <dec_to_hex_dec+0x38>
    }
*size=cnt;
 800091a:	69bb      	ldr	r3, [r7, #24]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	701a      	strb	r2, [r3, #0]

}
 8000922:	bf00      	nop
 8000924:	3724      	adds	r7, #36	; 0x24
 8000926:	46bd      	mov	sp, r7
 8000928:	bc80      	pop	{r7}
 800092a:	4770      	bx	lr
 800092c:	66666667 	.word	0x66666667

08000930 <Keypad_GetVal>:
		HAL_GPIO_Init(cols_port, &GPIO_InitStruct);
	}
}

uint8_t Keypad_GetVal(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
	uint8_t rows_counter= 0;
 8000936:	2300      	movs	r3, #0
 8000938:	71fb      	strb	r3, [r7, #7]
	uint8_t columns_counter= 0;
 800093a:	2300      	movs	r3, #0
 800093c:	71bb      	strb	r3, [r7, #6]
	uint8_t counter= 0;
 800093e:	2300      	movs	r3, #0
 8000940:	717b      	strb	r3, [r7, #5]
	GPIO_PinState keypad_state;
	uint8_t ret_val= 0;
 8000942:	2300      	movs	r3, #0
 8000944:	713b      	strb	r3, [r7, #4]
while(ret_val==0)
 8000946:	e044      	b.n	80009d2 <Keypad_GetVal+0xa2>
{
	for(rows_counter= 0; rows_counter < KEYPAD_ROWS; rows_counter++)
 8000948:	2300      	movs	r3, #0
 800094a:	71fb      	strb	r3, [r7, #7]
 800094c:	e03b      	b.n	80009c6 <Keypad_GetVal+0x96>
	{
		for(counter= 0; counter < KEYPAD_ROWS; counter++)
 800094e:	2300      	movs	r3, #0
 8000950:	717b      	strb	r3, [r7, #5]
 8000952:	e00b      	b.n	800096c <Keypad_GetVal+0x3c>
		{
			HAL_GPIO_WritePin(GPIOA, row_pins[counter], GPIO_PIN_RESET);
 8000954:	797b      	ldrb	r3, [r7, #5]
 8000956:	4a23      	ldr	r2, [pc, #140]	; (80009e4 <Keypad_GetVal+0xb4>)
 8000958:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800095c:	2200      	movs	r2, #0
 800095e:	4619      	mov	r1, r3
 8000960:	4821      	ldr	r0, [pc, #132]	; (80009e8 <Keypad_GetVal+0xb8>)
 8000962:	f000 fe90 	bl	8001686 <HAL_GPIO_WritePin>
		for(counter= 0; counter < KEYPAD_ROWS; counter++)
 8000966:	797b      	ldrb	r3, [r7, #5]
 8000968:	3301      	adds	r3, #1
 800096a:	717b      	strb	r3, [r7, #5]
 800096c:	797b      	ldrb	r3, [r7, #5]
 800096e:	2b03      	cmp	r3, #3
 8000970:	d9f0      	bls.n	8000954 <Keypad_GetVal+0x24>
		}
		HAL_GPIO_WritePin(GPIOA, row_pins[rows_counter], GPIO_PIN_SET);
 8000972:	79fb      	ldrb	r3, [r7, #7]
 8000974:	4a1b      	ldr	r2, [pc, #108]	; (80009e4 <Keypad_GetVal+0xb4>)
 8000976:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800097a:	2201      	movs	r2, #1
 800097c:	4619      	mov	r1, r3
 800097e:	481a      	ldr	r0, [pc, #104]	; (80009e8 <Keypad_GetVal+0xb8>)
 8000980:	f000 fe81 	bl	8001686 <HAL_GPIO_WritePin>

		for(columns_counter= 0; columns_counter < KEYPAD_COLS; columns_counter++)
 8000984:	2300      	movs	r3, #0
 8000986:	71bb      	strb	r3, [r7, #6]
 8000988:	e017      	b.n	80009ba <Keypad_GetVal+0x8a>
		{
			keypad_state= HAL_GPIO_ReadPin(GPIOA, col_pins[columns_counter]);
 800098a:	79bb      	ldrb	r3, [r7, #6]
 800098c:	4a17      	ldr	r2, [pc, #92]	; (80009ec <Keypad_GetVal+0xbc>)
 800098e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000992:	4619      	mov	r1, r3
 8000994:	4814      	ldr	r0, [pc, #80]	; (80009e8 <Keypad_GetVal+0xb8>)
 8000996:	f000 fe5f 	bl	8001658 <HAL_GPIO_ReadPin>
 800099a:	4603      	mov	r3, r0
 800099c:	70fb      	strb	r3, [r7, #3]
			if(keypad_state == GPIO_PIN_SET)
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	2b01      	cmp	r3, #1
 80009a2:	d107      	bne.n	80009b4 <Keypad_GetVal+0x84>
			{
				ret_val= keypad_buttons[rows_counter][columns_counter];
 80009a4:	79fa      	ldrb	r2, [r7, #7]
 80009a6:	79bb      	ldrb	r3, [r7, #6]
 80009a8:	4911      	ldr	r1, [pc, #68]	; (80009f0 <Keypad_GetVal+0xc0>)
 80009aa:	0092      	lsls	r2, r2, #2
 80009ac:	440a      	add	r2, r1
 80009ae:	4413      	add	r3, r2
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	713b      	strb	r3, [r7, #4]
		for(columns_counter= 0; columns_counter < KEYPAD_COLS; columns_counter++)
 80009b4:	79bb      	ldrb	r3, [r7, #6]
 80009b6:	3301      	adds	r3, #1
 80009b8:	71bb      	strb	r3, [r7, #6]
 80009ba:	79bb      	ldrb	r3, [r7, #6]
 80009bc:	2b03      	cmp	r3, #3
 80009be:	d9e4      	bls.n	800098a <Keypad_GetVal+0x5a>
	for(rows_counter= 0; rows_counter < KEYPAD_ROWS; rows_counter++)
 80009c0:	79fb      	ldrb	r3, [r7, #7]
 80009c2:	3301      	adds	r3, #1
 80009c4:	71fb      	strb	r3, [r7, #7]
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	2b03      	cmp	r3, #3
 80009ca:	d9c0      	bls.n	800094e <Keypad_GetVal+0x1e>
			}
		}
	}
	DELAY(8);
 80009cc:	2008      	movs	r0, #8
 80009ce:	f7ff fe8d 	bl	80006ec <DELAY>
while(ret_val==0)
 80009d2:	793b      	ldrb	r3, [r7, #4]
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d0b7      	beq.n	8000948 <Keypad_GetVal+0x18>
}
	return ret_val;
 80009d8:	793b      	ldrb	r3, [r7, #4]
}
 80009da:	4618      	mov	r0, r3
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000000 	.word	0x20000000
 80009e8:	40010800 	.word	0x40010800
 80009ec:	20000008 	.word	0x20000008
 80009f0:	20000010 	.word	0x20000010

080009f4 <uart_string>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void uart_string (char *str)
	{         //dispal string on screen
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
		int i;
		for(i=0;str[i]!=0;i++){   //send each character of the string till the null
 80009fc:	2300      	movs	r3, #0
 80009fe:	60fb      	str	r3, [r7, #12]
 8000a00:	e00d      	b.n	8000a1e <uart_string+0x2a>
			HAL_UART_Transmit(&huart1,&str[i], 1, 100);
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	18d1      	adds	r1, r2, r3
 8000a08:	2364      	movs	r3, #100	; 0x64
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	4809      	ldr	r0, [pc, #36]	; (8000a34 <uart_string+0x40>)
 8000a0e:	f001 fab1 	bl	8001f74 <HAL_UART_Transmit>
			DELAY(4);
 8000a12:	2004      	movs	r0, #4
 8000a14:	f7ff fe6a 	bl	80006ec <DELAY>
		for(i=0;str[i]!=0;i++){   //send each character of the string till the null
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	60fb      	str	r3, [r7, #12]
 8000a1e:	68fb      	ldr	r3, [r7, #12]
 8000a20:	687a      	ldr	r2, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d1eb      	bne.n	8000a02 <uart_string+0xe>
		}
	}
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	3710      	adds	r7, #16
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000048 	.word	0x20000048

08000a38 <clear>:
void clear()
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b082      	sub	sp, #8
 8000a3c:	af00      	add	r7, sp, #0
	uint8_t clear='c';
 8000a3e:	2363      	movs	r3, #99	; 0x63
 8000a40:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1,&clear, 1, 100);
 8000a42:	1df9      	adds	r1, r7, #7
 8000a44:	2364      	movs	r3, #100	; 0x64
 8000a46:	2201      	movs	r2, #1
 8000a48:	4803      	ldr	r0, [pc, #12]	; (8000a58 <clear+0x20>)
 8000a4a:	f001 fa93 	bl	8001f74 <HAL_UART_Transmit>
}
 8000a4e:	bf00      	nop
 8000a50:	3708      	adds	r7, #8
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000048 	.word	0x20000048

08000a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a5c:	b5b0      	push	{r4, r5, r7, lr}
 8000a5e:	b08e      	sub	sp, #56	; 0x38
 8000a60:	af02      	add	r7, sp, #8

  /* USER CODE BEGIN 1 */
		uint8_t operand1_hex[3]={0,0,0};
 8000a62:	4aca      	ldr	r2, [pc, #808]	; (8000d8c <main+0x330>)
 8000a64:	f107 0320 	add.w	r3, r7, #32
 8000a68:	6812      	ldr	r2, [r2, #0]
 8000a6a:	4611      	mov	r1, r2
 8000a6c:	8019      	strh	r1, [r3, #0]
 8000a6e:	3302      	adds	r3, #2
 8000a70:	0c12      	lsrs	r2, r2, #16
 8000a72:	701a      	strb	r2, [r3, #0]
		uint8_t operand2_hex[3]={0,0,0};
 8000a74:	4ac5      	ldr	r2, [pc, #788]	; (8000d8c <main+0x330>)
 8000a76:	f107 031c 	add.w	r3, r7, #28
 8000a7a:	6812      	ldr	r2, [r2, #0]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	8019      	strh	r1, [r3, #0]
 8000a80:	3302      	adds	r3, #2
 8000a82:	0c12      	lsrs	r2, r2, #16
 8000a84:	701a      	strb	r2, [r3, #0]
		uint8_t opration_sign=0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	76fb      	strb	r3, [r7, #27]
		uint8_t count,equal_sgin,Error_flag[4];
	    int operand1_dec,operand2_dec,result_dec,result_float=0;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	60fb      	str	r3, [r7, #12]
	    uint8_t result_hex[3]={0,0,0};
 8000a8e:	4abf      	ldr	r2, [pc, #764]	; (8000d8c <main+0x330>)
 8000a90:	f107 0308 	add.w	r3, r7, #8
 8000a94:	6812      	ldr	r2, [r2, #0]
 8000a96:	4611      	mov	r1, r2
 8000a98:	8019      	strh	r1, [r3, #0]
 8000a9a:	3302      	adds	r3, #2
 8000a9c:	0c12      	lsrs	r2, r2, #16
 8000a9e:	701a      	strb	r2, [r3, #0]
	    uint8_t result_hex_float[3]={0,0,0};
 8000aa0:	4aba      	ldr	r2, [pc, #744]	; (8000d8c <main+0x330>)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	6812      	ldr	r2, [r2, #0]
 8000aa6:	4611      	mov	r1, r2
 8000aa8:	8019      	strh	r1, [r3, #0]
 8000aaa:	3302      	adds	r3, #2
 8000aac:	0c12      	lsrs	r2, r2, #16
 8000aae:	701a      	strb	r2, [r3, #0]
	    uint8_t size,flag=0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	    uint8_t da='o';
 8000ab6:	236f      	movs	r3, #111	; 0x6f
 8000ab8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000abc:	f000 fb02 	bl	80010c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac0:	f000 f978 	bl	8000db4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ac4:	f000 f9dc 	bl	8000e80 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000ac8:	f000 f9b0 	bl	8000e2c <MX_USART1_UART_Init>
  while (1)
  {
	  while(1)
	  {
    /* USER CODE END WHILE */
	  for ( count = 0; count < 3; count++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000ad2:	e029      	b.n	8000b28 <main+0xcc>
	     {
	     operand1_hex[count]=Keypad_GetVal();
 8000ad4:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000ad8:	f7ff ff2a 	bl	8000930 <Keypad_GetVal>
 8000adc:	4603      	mov	r3, r0
 8000ade:	461a      	mov	r2, r3
 8000ae0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ae4:	4423      	add	r3, r4
 8000ae6:	f803 2c10 	strb.w	r2, [r3, #-16]
	     if (operand1_hex[count]=='c')
 8000aea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aee:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000af2:	4413      	add	r3, r2
 8000af4:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8000af8:	2b63      	cmp	r3, #99	; 0x63
 8000afa:	d103      	bne.n	8000b04 <main+0xa8>
	     {
	    	 flag=1;
 8000afc:	2301      	movs	r3, #1
 8000afe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	         break;
 8000b02:	e015      	b.n	8000b30 <main+0xd4>

	     }
	     else
	     {
	    	 HAL_UART_Transmit(&huart1,&operand1_hex[count], 1, 100);
 8000b04:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b08:	f107 0220 	add.w	r2, r7, #32
 8000b0c:	18d1      	adds	r1, r2, r3
 8000b0e:	2364      	movs	r3, #100	; 0x64
 8000b10:	2201      	movs	r2, #1
 8000b12:	489f      	ldr	r0, [pc, #636]	; (8000d90 <main+0x334>)
 8000b14:	f001 fa2e 	bl	8001f74 <HAL_UART_Transmit>
	    	 flag=0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  for ( count = 0; count < 3; count++)
 8000b1e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b22:	3301      	adds	r3, #1
 8000b24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b2c:	2b02      	cmp	r3, #2
 8000b2e:	d9d1      	bls.n	8000ad4 <main+0x78>
	     }
	     }

		if(flag!=0)
 8000b30:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d002      	beq.n	8000b3e <main+0xe2>
		{
		clear();
 8000b38:	f7ff ff7e 	bl	8000a38 <clear>
		break;
 8000b3c:	e134      	b.n	8000da8 <main+0x34c>
		}

	  opration_sign=Keypad_GetVal();
 8000b3e:	f7ff fef7 	bl	8000930 <Keypad_GetVal>
 8000b42:	4603      	mov	r3, r0
 8000b44:	76fb      	strb	r3, [r7, #27]
	  if(opration_sign=='c')
 8000b46:	7efb      	ldrb	r3, [r7, #27]
 8000b48:	2b63      	cmp	r3, #99	; 0x63
 8000b4a:	d102      	bne.n	8000b52 <main+0xf6>
	  {
		  clear();
 8000b4c:	f7ff ff74 	bl	8000a38 <clear>
		  break;
 8000b50:	e12a      	b.n	8000da8 <main+0x34c>
	  }
	  else
	  {
		  HAL_UART_Transmit(&huart1,&opration_sign,1, 100);
 8000b52:	f107 011b 	add.w	r1, r7, #27
 8000b56:	2364      	movs	r3, #100	; 0x64
 8000b58:	2201      	movs	r2, #1
 8000b5a:	488d      	ldr	r0, [pc, #564]	; (8000d90 <main+0x334>)
 8000b5c:	f001 fa0a 	bl	8001f74 <HAL_UART_Transmit>
	  }


	  for ( count = 0; count < 3; count++)
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000b66:	e029      	b.n	8000bbc <main+0x160>
	  	     {
	  	     operand2_hex[count]=Keypad_GetVal();
 8000b68:	f897 402f 	ldrb.w	r4, [r7, #47]	; 0x2f
 8000b6c:	f7ff fee0 	bl	8000930 <Keypad_GetVal>
 8000b70:	4603      	mov	r3, r0
 8000b72:	461a      	mov	r2, r3
 8000b74:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000b78:	4423      	add	r3, r4
 8000b7a:	f803 2c14 	strb.w	r2, [r3, #-20]
	  	     if (operand2_hex[count]=='c')
 8000b7e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b82:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8000b86:	4413      	add	r3, r2
 8000b88:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 8000b8c:	2b63      	cmp	r3, #99	; 0x63
 8000b8e:	d103      	bne.n	8000b98 <main+0x13c>
	  	     {
	  	         flag=1;
 8000b90:	2301      	movs	r3, #1
 8000b92:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  	         break;
 8000b96:	e015      	b.n	8000bc4 <main+0x168>

	  	     }
	  	     else
	  	     {
	  	    	 HAL_UART_Transmit(&huart1,&operand2_hex[count], 1, 100);
 8000b98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000b9c:	f107 021c 	add.w	r2, r7, #28
 8000ba0:	18d1      	adds	r1, r2, r3
 8000ba2:	2364      	movs	r3, #100	; 0x64
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	487a      	ldr	r0, [pc, #488]	; (8000d90 <main+0x334>)
 8000ba8:	f001 f9e4 	bl	8001f74 <HAL_UART_Transmit>
	  	    	 flag = 0;
 8000bac:	2300      	movs	r3, #0
 8000bae:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
	  for ( count = 0; count < 3; count++)
 8000bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bb6:	3301      	adds	r3, #1
 8000bb8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000bbc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000bc0:	2b02      	cmp	r3, #2
 8000bc2:	d9d1      	bls.n	8000b68 <main+0x10c>
	  	     }

	  	     }

		if(flag!=0)
 8000bc4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d002      	beq.n	8000bd2 <main+0x176>
		{
		clear();
 8000bcc:	f7ff ff34 	bl	8000a38 <clear>
		break;
 8000bd0:	e0ea      	b.n	8000da8 <main+0x34c>
		}

	    equal_sgin=Keypad_GetVal();
 8000bd2:	f7ff fead 	bl	8000930 <Keypad_GetVal>
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	76bb      	strb	r3, [r7, #26]
	    if (equal_sgin !='=')
 8000bda:	7ebb      	ldrb	r3, [r7, #26]
 8000bdc:	2b3d      	cmp	r3, #61	; 0x3d
 8000bde:	d005      	beq.n	8000bec <main+0x190>
	    {
	    	clear();
 8000be0:	f7ff ff2a 	bl	8000a38 <clear>
	       uart_string("Error\0");
 8000be4:	486b      	ldr	r0, [pc, #428]	; (8000d94 <main+0x338>)
 8000be6:	f7ff ff05 	bl	80009f4 <uart_string>
	       break;
 8000bea:	e0dd      	b.n	8000da8 <main+0x34c>
	    }
	    else
	    {
	    	HAL_UART_Transmit(&huart1,&equal_sgin, 1, 100);
 8000bec:	f107 011a 	add.w	r1, r7, #26
 8000bf0:	2364      	movs	r3, #100	; 0x64
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	4866      	ldr	r0, [pc, #408]	; (8000d90 <main+0x334>)
 8000bf6:	f001 f9bd 	bl	8001f74 <HAL_UART_Transmit>
	        DELAY(6);
 8000bfa:	2006      	movs	r0, #6
 8000bfc:	f7ff fd76 	bl	80006ec <DELAY>
	    }


	    Error_flag[0]=invldOpr(operand1_hex[0],operand1_hex[1],operand1_hex[2]);
 8000c00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c04:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000c08:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f7ff fd37 	bl	8000680 <invldOpr>
 8000c12:	4603      	mov	r3, r0
 8000c14:	753b      	strb	r3, [r7, #20]
	    Error_flag[1]=invldOpr(operand2_hex[0],operand2_hex[1],operand2_hex[2]);
 8000c16:	7f3b      	ldrb	r3, [r7, #28]
 8000c18:	7f79      	ldrb	r1, [r7, #29]
 8000c1a:	7fba      	ldrb	r2, [r7, #30]
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f7ff fd2f 	bl	8000680 <invldOpr>
 8000c22:	4603      	mov	r3, r0
 8000c24:	757b      	strb	r3, [r7, #21]
	    Error_flag[2]=invldOpration(opration_sign);
 8000c26:	7efb      	ldrb	r3, [r7, #27]
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f7ff fd4c 	bl	80006c6 <invldOpration>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	75bb      	strb	r3, [r7, #22]


	 	 if(Error_flag[0]==10 || Error_flag[1]==10 || Error_flag[2]==10 )
 8000c32:	7d3b      	ldrb	r3, [r7, #20]
 8000c34:	2b0a      	cmp	r3, #10
 8000c36:	d005      	beq.n	8000c44 <main+0x1e8>
 8000c38:	7d7b      	ldrb	r3, [r7, #21]
 8000c3a:	2b0a      	cmp	r3, #10
 8000c3c:	d002      	beq.n	8000c44 <main+0x1e8>
 8000c3e:	7dbb      	ldrb	r3, [r7, #22]
 8000c40:	2b0a      	cmp	r3, #10
 8000c42:	d105      	bne.n	8000c50 <main+0x1f4>
	 	    {
	 	        clear();
 8000c44:	f7ff fef8 	bl	8000a38 <clear>
	 	        uart_string("INVALD\0");
 8000c48:	4853      	ldr	r0, [pc, #332]	; (8000d98 <main+0x33c>)
 8000c4a:	f7ff fed3 	bl	80009f4 <uart_string>
	 	        break;
 8000c4e:	e0ab      	b.n	8000da8 <main+0x34c>
	 	    }

	    operand1_dec=hex_to_dec(operand1_hex[0],operand1_hex[1],operand1_hex[2]);
 8000c50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c54:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8000c58:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	f7ff fdc1 	bl	80007e4 <hex_to_dec>
 8000c62:	62b8      	str	r0, [r7, #40]	; 0x28
	    operand2_dec=hex_to_dec(operand2_hex[0],operand2_hex[1],operand2_hex[2]);
 8000c64:	7f3b      	ldrb	r3, [r7, #28]
 8000c66:	7f79      	ldrb	r1, [r7, #29]
 8000c68:	7fba      	ldrb	r2, [r7, #30]
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fdba 	bl	80007e4 <hex_to_dec>
 8000c70:	6278      	str	r0, [r7, #36]	; 0x24
	    Error_flag[3]=divByZeroError(operand2_dec,opration_sign);
 8000c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	7efa      	ldrb	r2, [r7, #27]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff fcea 	bl	8000654 <divByZeroError>
 8000c80:	4603      	mov	r3, r0
 8000c82:	75fb      	strb	r3, [r7, #23]

	            if(Error_flag[3]==10)
 8000c84:	7dfb      	ldrb	r3, [r7, #23]
 8000c86:	2b0a      	cmp	r3, #10
 8000c88:	d105      	bne.n	8000c96 <main+0x23a>
	        {
	            clear();
 8000c8a:	f7ff fed5 	bl	8000a38 <clear>
	            uart_string("INVALD\0");
 8000c8e:	4842      	ldr	r0, [pc, #264]	; (8000d98 <main+0x33c>)
 8000c90:	f7ff feb0 	bl	80009f4 <uart_string>
	            break;
 8000c94:	e088      	b.n	8000da8 <main+0x34c>
	        }
	            ArithFunc(operand1_dec,opration_sign,operand2_dec,&result_dec,&result_float);
 8000c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000c98:	f7ff fb12 	bl	80002c0 <__aeabi_i2f>
 8000c9c:	4605      	mov	r5, r0
 8000c9e:	7efc      	ldrb	r4, [r7, #27]
 8000ca0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000ca2:	f7ff fb0d 	bl	80002c0 <__aeabi_i2f>
 8000ca6:	4601      	mov	r1, r0
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	f107 030c 	add.w	r3, r7, #12
 8000cb0:	9300      	str	r3, [sp, #0]
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	460a      	mov	r2, r1
 8000cb6:	4621      	mov	r1, r4
 8000cb8:	4628      	mov	r0, r5
 8000cba:	f7ff fd37 	bl	800072c <ArithFunc>

	            if (operand1_dec<operand2_dec && opration_sign == '-')
 8000cbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8000cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	da08      	bge.n	8000cd8 <main+0x27c>
 8000cc6:	7efb      	ldrb	r3, [r7, #27]
 8000cc8:	2b2d      	cmp	r3, #45	; 0x2d
 8000cca:	d105      	bne.n	8000cd8 <main+0x27c>
	            {
	                uart_string("-\0");
 8000ccc:	4833      	ldr	r0, [pc, #204]	; (8000d9c <main+0x340>)
 8000cce:	f7ff fe91 	bl	80009f4 <uart_string>
	                result_dec = ~result_dec+1;
 8000cd2:	693b      	ldr	r3, [r7, #16]
 8000cd4:	425b      	negs	r3, r3
 8000cd6:	613b      	str	r3, [r7, #16]
	            }
	            dec_to_hex_dec(result_dec, result_hex, &size);
 8000cd8:	693b      	ldr	r3, [r7, #16]
 8000cda:	1cfa      	adds	r2, r7, #3
 8000cdc:	f107 0108 	add.w	r1, r7, #8
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff fdd9 	bl	8000898 <dec_to_hex_dec>

	      	  for ( count = 0; count <=size; count++)
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000cec:	e011      	b.n	8000d12 <main+0x2b6>
	      	  	     {
	      		HAL_UART_Transmit(&huart1, &result_hex[count], 1, 100);
 8000cee:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cf2:	f107 0208 	add.w	r2, r7, #8
 8000cf6:	18d1      	adds	r1, r2, r3
 8000cf8:	2364      	movs	r3, #100	; 0x64
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	4824      	ldr	r0, [pc, #144]	; (8000d90 <main+0x334>)
 8000cfe:	f001 f939 	bl	8001f74 <HAL_UART_Transmit>
	      			DELAY(5);
 8000d02:	2005      	movs	r0, #5
 8000d04:	f7ff fcf2 	bl	80006ec <DELAY>
	      	  for ( count = 0; count <=size; count++)
 8000d08:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8000d12:	78fb      	ldrb	r3, [r7, #3]
 8000d14:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d9e8      	bls.n	8000cee <main+0x292>
	      	  	     }
	      	  if(size==0)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d102      	bne.n	8000d28 <main+0x2cc>
	      	  {
	      		  	 uart_string("0\0");
 8000d22:	481f      	ldr	r0, [pc, #124]	; (8000da0 <main+0x344>)
 8000d24:	f7ff fe66 	bl	80009f4 <uart_string>
	      	  }

			if(opration_sign=='/' && result_float!=0)
 8000d28:	7efb      	ldrb	r3, [r7, #27]
 8000d2a:	2b2f      	cmp	r3, #47	; 0x2f
 8000d2c:	d128      	bne.n	8000d80 <main+0x324>
 8000d2e:	68fb      	ldr	r3, [r7, #12]
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d025      	beq.n	8000d80 <main+0x324>
			{
			dec_to_hex(result_float,result_hex_float);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	1d3a      	adds	r2, r7, #4
 8000d38:	4611      	mov	r1, r2
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff fd78 	bl	8000830 <dec_to_hex>
				uart_string(".\0");
 8000d40:	4818      	ldr	r0, [pc, #96]	; (8000da4 <main+0x348>)
 8000d42:	f7ff fe57 	bl	80009f4 <uart_string>
				HAL_UART_Transmit(&huart1, &result_hex_float[0], 1, 100);
 8000d46:	1d39      	adds	r1, r7, #4
 8000d48:	2364      	movs	r3, #100	; 0x64
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4810      	ldr	r0, [pc, #64]	; (8000d90 <main+0x334>)
 8000d4e:	f001 f911 	bl	8001f74 <HAL_UART_Transmit>
			if(result_hex_float[1] !='0' && result_hex_float[2] != '0')
 8000d52:	797b      	ldrb	r3, [r7, #5]
 8000d54:	2b30      	cmp	r3, #48	; 0x30
 8000d56:	d009      	beq.n	8000d6c <main+0x310>
 8000d58:	79bb      	ldrb	r3, [r7, #6]
 8000d5a:	2b30      	cmp	r3, #48	; 0x30
 8000d5c:	d006      	beq.n	8000d6c <main+0x310>
			   HAL_UART_Transmit(&huart1, &result_hex_float[1], 1, 100);
 8000d5e:	1d3b      	adds	r3, r7, #4
 8000d60:	1c59      	adds	r1, r3, #1
 8000d62:	2364      	movs	r3, #100	; 0x64
 8000d64:	2201      	movs	r2, #1
 8000d66:	480a      	ldr	r0, [pc, #40]	; (8000d90 <main+0x334>)
 8000d68:	f001 f904 	bl	8001f74 <HAL_UART_Transmit>
			   if(result_hex_float[2]!='0')
 8000d6c:	79bb      	ldrb	r3, [r7, #6]
 8000d6e:	2b30      	cmp	r3, #48	; 0x30
 8000d70:	d006      	beq.n	8000d80 <main+0x324>
				   HAL_UART_Transmit(&huart1, &result_hex_float[2], 1, 100);
 8000d72:	1d3b      	adds	r3, r7, #4
 8000d74:	1c99      	adds	r1, r3, #2
 8000d76:	2364      	movs	r3, #100	; 0x64
 8000d78:	2201      	movs	r2, #1
 8000d7a:	4805      	ldr	r0, [pc, #20]	; (8000d90 <main+0x334>)
 8000d7c:	f001 f8fa 	bl	8001f74 <HAL_UART_Transmit>
			}



			Keypad_GetVal();
 8000d80:	f7ff fdd6 	bl	8000930 <Keypad_GetVal>
			clear();
 8000d84:	f7ff fe58 	bl	8000a38 <clear>
	  for ( count = 0; count < 3; count++)
 8000d88:	e6a0      	b.n	8000acc <main+0x70>
 8000d8a:	bf00      	nop
 8000d8c:	08002300 	.word	0x08002300
 8000d90:	20000048 	.word	0x20000048
 8000d94:	080022e4 	.word	0x080022e4
 8000d98:	080022ec 	.word	0x080022ec
 8000d9c:	080022f4 	.word	0x080022f4
 8000da0:	080022f8 	.word	0x080022f8
 8000da4:	080022fc 	.word	0x080022fc
	  }
	  Keypad_GetVal();
 8000da8:	f7ff fdc2 	bl	8000930 <Keypad_GetVal>
	  clear();
 8000dac:	f7ff fe44 	bl	8000a38 <clear>
  while (1)
 8000db0:	e68c      	b.n	8000acc <main+0x70>
 8000db2:	bf00      	nop

08000db4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b090      	sub	sp, #64	; 0x40
 8000db8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dba:	f107 0318 	add.w	r3, r7, #24
 8000dbe:	2228      	movs	r2, #40	; 0x28
 8000dc0:	2100      	movs	r1, #0
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f001 fa7a 	bl	80022bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
 8000dd2:	60da      	str	r2, [r3, #12]
 8000dd4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dd6:	2302      	movs	r3, #2
 8000dd8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dda:	2301      	movs	r3, #1
 8000ddc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dde:	2310      	movs	r3, #16
 8000de0:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000de2:	2300      	movs	r3, #0
 8000de4:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de6:	f107 0318 	add.w	r3, r7, #24
 8000dea:	4618      	mov	r0, r3
 8000dec:	f000 fc64 	bl	80016b8 <HAL_RCC_OscConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000df6:	f000 f88d 	bl	8000f14 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e0e:	1d3b      	adds	r3, r7, #4
 8000e10:	2100      	movs	r1, #0
 8000e12:	4618      	mov	r0, r3
 8000e14:	f000 fed0 	bl	8001bb8 <HAL_RCC_ClockConfig>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 f879 	bl	8000f14 <Error_Handler>
  }
}
 8000e22:	bf00      	nop
 8000e24:	3740      	adds	r7, #64	; 0x40
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
	...

08000e2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000e30:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e32:	4a12      	ldr	r2, [pc, #72]	; (8000e7c <MX_USART1_UART_Init+0x50>)
 8000e34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000e36:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e38:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000e3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000e3e:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000e44:	4b0c      	ldr	r3, [pc, #48]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000e4a:	4b0b      	ldr	r3, [pc, #44]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000e50:	4b09      	ldr	r3, [pc, #36]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e52:	220c      	movs	r2, #12
 8000e54:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e56:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e5c:	4b06      	ldr	r3, [pc, #24]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000e62:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_USART1_UART_Init+0x4c>)
 8000e64:	f001 f836 	bl	8001ed4 <HAL_UART_Init>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000e6e:	f000 f851 	bl	8000f14 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	20000048 	.word	0x20000048
 8000e7c:	40013800 	.word	0x40013800

08000e80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e86:	f107 0308 	add.w	r3, r7, #8
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	601a      	str	r2, [r3, #0]
 8000e8e:	605a      	str	r2, [r3, #4]
 8000e90:	609a      	str	r2, [r3, #8]
 8000e92:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e94:	4b1d      	ldr	r3, [pc, #116]	; (8000f0c <MX_GPIO_Init+0x8c>)
 8000e96:	699b      	ldr	r3, [r3, #24]
 8000e98:	4a1c      	ldr	r2, [pc, #112]	; (8000f0c <MX_GPIO_Init+0x8c>)
 8000e9a:	f043 0320 	orr.w	r3, r3, #32
 8000e9e:	6193      	str	r3, [r2, #24]
 8000ea0:	4b1a      	ldr	r3, [pc, #104]	; (8000f0c <MX_GPIO_Init+0x8c>)
 8000ea2:	699b      	ldr	r3, [r3, #24]
 8000ea4:	f003 0320 	and.w	r3, r3, #32
 8000ea8:	607b      	str	r3, [r7, #4]
 8000eaa:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eac:	4b17      	ldr	r3, [pc, #92]	; (8000f0c <MX_GPIO_Init+0x8c>)
 8000eae:	699b      	ldr	r3, [r3, #24]
 8000eb0:	4a16      	ldr	r2, [pc, #88]	; (8000f0c <MX_GPIO_Init+0x8c>)
 8000eb2:	f043 0304 	orr.w	r3, r3, #4
 8000eb6:	6193      	str	r3, [r2, #24]
 8000eb8:	4b14      	ldr	r3, [pc, #80]	; (8000f0c <MX_GPIO_Init+0x8c>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	f003 0304 	and.w	r3, r3, #4
 8000ec0:	603b      	str	r3, [r7, #0]
 8000ec2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	210f      	movs	r1, #15
 8000ec8:	4811      	ldr	r0, [pc, #68]	; (8000f10 <MX_GPIO_Init+0x90>)
 8000eca:	f000 fbdc 	bl	8001686 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA0 PA1 PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000ece:	230f      	movs	r3, #15
 8000ed0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2302      	movs	r3, #2
 8000edc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	f107 0308 	add.w	r3, r7, #8
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	480a      	ldr	r0, [pc, #40]	; (8000f10 <MX_GPIO_Init+0x90>)
 8000ee6:	f000 fa33 	bl	8001350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000eea:	23f0      	movs	r3, #240	; 0xf0
 8000eec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	4619      	mov	r1, r3
 8000efc:	4804      	ldr	r0, [pc, #16]	; (8000f10 <MX_GPIO_Init+0x90>)
 8000efe:	f000 fa27 	bl	8001350 <HAL_GPIO_Init>

}
 8000f02:	bf00      	nop
 8000f04:	3718      	adds	r7, #24
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	40021000 	.word	0x40021000
 8000f10:	40010800 	.word	0x40010800

08000f14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f18:	b672      	cpsid	i
}
 8000f1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f1c:	e7fe      	b.n	8000f1c <Error_Handler+0x8>
	...

08000f20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000f26:	4b15      	ldr	r3, [pc, #84]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f28:	699b      	ldr	r3, [r3, #24]
 8000f2a:	4a14      	ldr	r2, [pc, #80]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f2c:	f043 0301 	orr.w	r3, r3, #1
 8000f30:	6193      	str	r3, [r2, #24]
 8000f32:	4b12      	ldr	r3, [pc, #72]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f34:	699b      	ldr	r3, [r3, #24]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	60bb      	str	r3, [r7, #8]
 8000f3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f3e:	4b0f      	ldr	r3, [pc, #60]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f40:	69db      	ldr	r3, [r3, #28]
 8000f42:	4a0e      	ldr	r2, [pc, #56]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f48:	61d3      	str	r3, [r2, #28]
 8000f4a:	4b0c      	ldr	r3, [pc, #48]	; (8000f7c <HAL_MspInit+0x5c>)
 8000f4c:	69db      	ldr	r3, [r3, #28]
 8000f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f52:	607b      	str	r3, [r7, #4]
 8000f54:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000f56:	4b0a      	ldr	r3, [pc, #40]	; (8000f80 <HAL_MspInit+0x60>)
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	60fb      	str	r3, [r7, #12]
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000f6a:	60fb      	str	r3, [r7, #12]
 8000f6c:	4a04      	ldr	r2, [pc, #16]	; (8000f80 <HAL_MspInit+0x60>)
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr
 8000f7c:	40021000 	.word	0x40021000
 8000f80:	40010000 	.word	0x40010000

08000f84 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b088      	sub	sp, #32
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	2200      	movs	r2, #0
 8000f92:	601a      	str	r2, [r3, #0]
 8000f94:	605a      	str	r2, [r3, #4]
 8000f96:	609a      	str	r2, [r3, #8]
 8000f98:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_UART_MspInit+0x8c>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d131      	bne.n	8001008 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000fa4:	4b1b      	ldr	r3, [pc, #108]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fa6:	699b      	ldr	r3, [r3, #24]
 8000fa8:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000faa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fae:	6193      	str	r3, [r2, #24]
 8000fb0:	4b18      	ldr	r3, [pc, #96]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fb2:	699b      	ldr	r3, [r3, #24]
 8000fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb8:	60fb      	str	r3, [r7, #12]
 8000fba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	4b15      	ldr	r3, [pc, #84]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fbe:	699b      	ldr	r3, [r3, #24]
 8000fc0:	4a14      	ldr	r2, [pc, #80]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	6193      	str	r3, [r2, #24]
 8000fc8:	4b12      	ldr	r3, [pc, #72]	; (8001014 <HAL_UART_MspInit+0x90>)
 8000fca:	699b      	ldr	r3, [r3, #24]
 8000fcc:	f003 0304 	and.w	r3, r3, #4
 8000fd0:	60bb      	str	r3, [r7, #8]
 8000fd2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000fd4:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000fd8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe2:	f107 0310 	add.w	r3, r7, #16
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	480b      	ldr	r0, [pc, #44]	; (8001018 <HAL_UART_MspInit+0x94>)
 8000fea:	f000 f9b1 	bl	8001350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000fee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ff2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffc:	f107 0310 	add.w	r3, r7, #16
 8001000:	4619      	mov	r1, r3
 8001002:	4805      	ldr	r0, [pc, #20]	; (8001018 <HAL_UART_MspInit+0x94>)
 8001004:	f000 f9a4 	bl	8001350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001008:	bf00      	nop
 800100a:	3720      	adds	r7, #32
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	40013800 	.word	0x40013800
 8001014:	40021000 	.word	0x40021000
 8001018:	40010800 	.word	0x40010800

0800101c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <NMI_Handler+0x4>

08001022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <HardFault_Handler+0x4>

08001028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <MemManage_Handler+0x4>

0800102e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001032:	e7fe      	b.n	8001032 <BusFault_Handler+0x4>

08001034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001038:	e7fe      	b.n	8001038 <UsageFault_Handler+0x4>

0800103a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800103a:	b480      	push	{r7}
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	46bd      	mov	sp, r7
 8001042:	bc80      	pop	{r7}
 8001044:	4770      	bx	lr

08001046 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001046:	b480      	push	{r7}
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800104a:	bf00      	nop
 800104c:	46bd      	mov	sp, r7
 800104e:	bc80      	pop	{r7}
 8001050:	4770      	bx	lr

08001052 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001052:	b480      	push	{r7}
 8001054:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	46bd      	mov	sp, r7
 800105a:	bc80      	pop	{r7}
 800105c:	4770      	bx	lr

0800105e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800105e:	b580      	push	{r7, lr}
 8001060:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001062:	f000 f875 	bl	8001150 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}

0800106a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800106a:	b480      	push	{r7}
 800106c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800106e:	bf00      	nop
 8001070:	46bd      	mov	sp, r7
 8001072:	bc80      	pop	{r7}
 8001074:	4770      	bx	lr
	...

08001078 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001078:	f7ff fff7 	bl	800106a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800107e:	490c      	ldr	r1, [pc, #48]	; (80010b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001080:	4a0c      	ldr	r2, [pc, #48]	; (80010b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001082:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001084:	e002      	b.n	800108c <LoopCopyDataInit>

08001086 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001086:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001088:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108a:	3304      	adds	r3, #4

0800108c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800108c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800108e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001090:	d3f9      	bcc.n	8001086 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001092:	4a09      	ldr	r2, [pc, #36]	; (80010b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001094:	4c09      	ldr	r4, [pc, #36]	; (80010bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001096:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001098:	e001      	b.n	800109e <LoopFillZerobss>

0800109a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800109c:	3204      	adds	r2, #4

0800109e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800109e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a0:	d3fb      	bcc.n	800109a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010a2:	f001 f8e7 	bl	8002274 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010a6:	f7ff fcd9 	bl	8000a5c <main>
  bx lr
 80010aa:	4770      	bx	lr
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b0:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 80010b4:	08002338 	.word	0x08002338
  ldr r2, =_sbss
 80010b8:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 80010bc:	20000094 	.word	0x20000094

080010c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c0:	e7fe      	b.n	80010c0 <ADC1_2_IRQHandler>
	...

080010c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010c8:	4b08      	ldr	r3, [pc, #32]	; (80010ec <HAL_Init+0x28>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	4a07      	ldr	r2, [pc, #28]	; (80010ec <HAL_Init+0x28>)
 80010ce:	f043 0310 	orr.w	r3, r3, #16
 80010d2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80010d4:	2003      	movs	r0, #3
 80010d6:	f000 f907 	bl	80012e8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80010da:	2000      	movs	r0, #0
 80010dc:	f000 f808 	bl	80010f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010e0:	f7ff ff1e 	bl	8000f20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010e4:	2300      	movs	r3, #0
}
 80010e6:	4618      	mov	r0, r3
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40022000 	.word	0x40022000

080010f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80010f8:	4b12      	ldr	r3, [pc, #72]	; (8001144 <HAL_InitTick+0x54>)
 80010fa:	681a      	ldr	r2, [r3, #0]
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <HAL_InitTick+0x58>)
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	4619      	mov	r1, r3
 8001102:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001106:	fbb3 f3f1 	udiv	r3, r3, r1
 800110a:	fbb2 f3f3 	udiv	r3, r2, r3
 800110e:	4618      	mov	r0, r3
 8001110:	f000 f911 	bl	8001336 <HAL_SYSTICK_Config>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800111a:	2301      	movs	r3, #1
 800111c:	e00e      	b.n	800113c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2b0f      	cmp	r3, #15
 8001122:	d80a      	bhi.n	800113a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001124:	2200      	movs	r2, #0
 8001126:	6879      	ldr	r1, [r7, #4]
 8001128:	f04f 30ff 	mov.w	r0, #4294967295
 800112c:	f000 f8e7 	bl	80012fe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001130:	4a06      	ldr	r2, [pc, #24]	; (800114c <HAL_InitTick+0x5c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001136:	2300      	movs	r3, #0
 8001138:	e000      	b.n	800113c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
}
 800113c:	4618      	mov	r0, r3
 800113e:	3708      	adds	r7, #8
 8001140:	46bd      	mov	sp, r7
 8001142:	bd80      	pop	{r7, pc}
 8001144:	20000020 	.word	0x20000020
 8001148:	20000028 	.word	0x20000028
 800114c:	20000024 	.word	0x20000024

08001150 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001154:	4b05      	ldr	r3, [pc, #20]	; (800116c <HAL_IncTick+0x1c>)
 8001156:	781b      	ldrb	r3, [r3, #0]
 8001158:	461a      	mov	r2, r3
 800115a:	4b05      	ldr	r3, [pc, #20]	; (8001170 <HAL_IncTick+0x20>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4413      	add	r3, r2
 8001160:	4a03      	ldr	r2, [pc, #12]	; (8001170 <HAL_IncTick+0x20>)
 8001162:	6013      	str	r3, [r2, #0]
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr
 800116c:	20000028 	.word	0x20000028
 8001170:	20000090 	.word	0x20000090

08001174 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  return uwTick;
 8001178:	4b02      	ldr	r3, [pc, #8]	; (8001184 <HAL_GetTick+0x10>)
 800117a:	681b      	ldr	r3, [r3, #0]
}
 800117c:	4618      	mov	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	bc80      	pop	{r7}
 8001182:	4770      	bx	lr
 8001184:	20000090 	.word	0x20000090

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	bc80      	pop	{r7}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	6039      	str	r1, [r7, #0]
 80011f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	db0a      	blt.n	8001216 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	b2da      	uxtb	r2, r3
 8001204:	490c      	ldr	r1, [pc, #48]	; (8001238 <__NVIC_SetPriority+0x4c>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	0112      	lsls	r2, r2, #4
 800120c:	b2d2      	uxtb	r2, r2
 800120e:	440b      	add	r3, r1
 8001210:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001214:	e00a      	b.n	800122c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	b2da      	uxtb	r2, r3
 800121a:	4908      	ldr	r1, [pc, #32]	; (800123c <__NVIC_SetPriority+0x50>)
 800121c:	79fb      	ldrb	r3, [r7, #7]
 800121e:	f003 030f 	and.w	r3, r3, #15
 8001222:	3b04      	subs	r3, #4
 8001224:	0112      	lsls	r2, r2, #4
 8001226:	b2d2      	uxtb	r2, r2
 8001228:	440b      	add	r3, r1
 800122a:	761a      	strb	r2, [r3, #24]
}
 800122c:	bf00      	nop
 800122e:	370c      	adds	r7, #12
 8001230:	46bd      	mov	sp, r7
 8001232:	bc80      	pop	{r7}
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000e100 	.word	0xe000e100
 800123c:	e000ed00 	.word	0xe000ed00

08001240 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001240:	b480      	push	{r7}
 8001242:	b089      	sub	sp, #36	; 0x24
 8001244:	af00      	add	r7, sp, #0
 8001246:	60f8      	str	r0, [r7, #12]
 8001248:	60b9      	str	r1, [r7, #8]
 800124a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800124c:	68fb      	ldr	r3, [r7, #12]
 800124e:	f003 0307 	and.w	r3, r3, #7
 8001252:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001254:	69fb      	ldr	r3, [r7, #28]
 8001256:	f1c3 0307 	rsb	r3, r3, #7
 800125a:	2b04      	cmp	r3, #4
 800125c:	bf28      	it	cs
 800125e:	2304      	movcs	r3, #4
 8001260:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001262:	69fb      	ldr	r3, [r7, #28]
 8001264:	3304      	adds	r3, #4
 8001266:	2b06      	cmp	r3, #6
 8001268:	d902      	bls.n	8001270 <NVIC_EncodePriority+0x30>
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	3b03      	subs	r3, #3
 800126e:	e000      	b.n	8001272 <NVIC_EncodePriority+0x32>
 8001270:	2300      	movs	r3, #0
 8001272:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001274:	f04f 32ff 	mov.w	r2, #4294967295
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	43da      	mvns	r2, r3
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	401a      	ands	r2, r3
 8001284:	697b      	ldr	r3, [r7, #20]
 8001286:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001288:	f04f 31ff 	mov.w	r1, #4294967295
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa01 f303 	lsl.w	r3, r1, r3
 8001292:	43d9      	mvns	r1, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001298:	4313      	orrs	r3, r2
         );
}
 800129a:	4618      	mov	r0, r3
 800129c:	3724      	adds	r7, #36	; 0x24
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr

080012a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b082      	sub	sp, #8
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	3b01      	subs	r3, #1
 80012b0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012b4:	d301      	bcc.n	80012ba <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012b6:	2301      	movs	r3, #1
 80012b8:	e00f      	b.n	80012da <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ba:	4a0a      	ldr	r2, [pc, #40]	; (80012e4 <SysTick_Config+0x40>)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	3b01      	subs	r3, #1
 80012c0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012c2:	210f      	movs	r1, #15
 80012c4:	f04f 30ff 	mov.w	r0, #4294967295
 80012c8:	f7ff ff90 	bl	80011ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012cc:	4b05      	ldr	r3, [pc, #20]	; (80012e4 <SysTick_Config+0x40>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012d2:	4b04      	ldr	r3, [pc, #16]	; (80012e4 <SysTick_Config+0x40>)
 80012d4:	2207      	movs	r2, #7
 80012d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
 80012e2:	bf00      	nop
 80012e4:	e000e010 	.word	0xe000e010

080012e8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012f0:	6878      	ldr	r0, [r7, #4]
 80012f2:	f7ff ff49 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}

080012fe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012fe:	b580      	push	{r7, lr}
 8001300:	b086      	sub	sp, #24
 8001302:	af00      	add	r7, sp, #0
 8001304:	4603      	mov	r3, r0
 8001306:	60b9      	str	r1, [r7, #8]
 8001308:	607a      	str	r2, [r7, #4]
 800130a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800130c:	2300      	movs	r3, #0
 800130e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001310:	f7ff ff5e 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 8001314:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	68b9      	ldr	r1, [r7, #8]
 800131a:	6978      	ldr	r0, [r7, #20]
 800131c:	f7ff ff90 	bl	8001240 <NVIC_EncodePriority>
 8001320:	4602      	mov	r2, r0
 8001322:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001326:	4611      	mov	r1, r2
 8001328:	4618      	mov	r0, r3
 800132a:	f7ff ff5f 	bl	80011ec <__NVIC_SetPriority>
}
 800132e:	bf00      	nop
 8001330:	3718      	adds	r7, #24
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b082      	sub	sp, #8
 800133a:	af00      	add	r7, sp, #0
 800133c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f7ff ffb0 	bl	80012a4 <SysTick_Config>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
	...

08001350 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001350:	b480      	push	{r7}
 8001352:	b08b      	sub	sp, #44	; 0x2c
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
 8001358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800135a:	2300      	movs	r3, #0
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800135e:	2300      	movs	r3, #0
 8001360:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001362:	e169      	b.n	8001638 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001364:	2201      	movs	r2, #1
 8001366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	69fa      	ldr	r2, [r7, #28]
 8001374:	4013      	ands	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001378:	69ba      	ldr	r2, [r7, #24]
 800137a:	69fb      	ldr	r3, [r7, #28]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8158 	bne.w	8001632 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	4a9a      	ldr	r2, [pc, #616]	; (80015f0 <HAL_GPIO_Init+0x2a0>)
 8001388:	4293      	cmp	r3, r2
 800138a:	d05e      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 800138c:	4a98      	ldr	r2, [pc, #608]	; (80015f0 <HAL_GPIO_Init+0x2a0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d875      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 8001392:	4a98      	ldr	r2, [pc, #608]	; (80015f4 <HAL_GPIO_Init+0x2a4>)
 8001394:	4293      	cmp	r3, r2
 8001396:	d058      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 8001398:	4a96      	ldr	r2, [pc, #600]	; (80015f4 <HAL_GPIO_Init+0x2a4>)
 800139a:	4293      	cmp	r3, r2
 800139c:	d86f      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 800139e:	4a96      	ldr	r2, [pc, #600]	; (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d052      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013a4:	4a94      	ldr	r2, [pc, #592]	; (80015f8 <HAL_GPIO_Init+0x2a8>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d869      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013aa:	4a94      	ldr	r2, [pc, #592]	; (80015fc <HAL_GPIO_Init+0x2ac>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d04c      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013b0:	4a92      	ldr	r2, [pc, #584]	; (80015fc <HAL_GPIO_Init+0x2ac>)
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d863      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013b6:	4a92      	ldr	r2, [pc, #584]	; (8001600 <HAL_GPIO_Init+0x2b0>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d046      	beq.n	800144a <HAL_GPIO_Init+0xfa>
 80013bc:	4a90      	ldr	r2, [pc, #576]	; (8001600 <HAL_GPIO_Init+0x2b0>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d85d      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013c2:	2b12      	cmp	r3, #18
 80013c4:	d82a      	bhi.n	800141c <HAL_GPIO_Init+0xcc>
 80013c6:	2b12      	cmp	r3, #18
 80013c8:	d859      	bhi.n	800147e <HAL_GPIO_Init+0x12e>
 80013ca:	a201      	add	r2, pc, #4	; (adr r2, 80013d0 <HAL_GPIO_Init+0x80>)
 80013cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013d0:	0800144b 	.word	0x0800144b
 80013d4:	08001425 	.word	0x08001425
 80013d8:	08001437 	.word	0x08001437
 80013dc:	08001479 	.word	0x08001479
 80013e0:	0800147f 	.word	0x0800147f
 80013e4:	0800147f 	.word	0x0800147f
 80013e8:	0800147f 	.word	0x0800147f
 80013ec:	0800147f 	.word	0x0800147f
 80013f0:	0800147f 	.word	0x0800147f
 80013f4:	0800147f 	.word	0x0800147f
 80013f8:	0800147f 	.word	0x0800147f
 80013fc:	0800147f 	.word	0x0800147f
 8001400:	0800147f 	.word	0x0800147f
 8001404:	0800147f 	.word	0x0800147f
 8001408:	0800147f 	.word	0x0800147f
 800140c:	0800147f 	.word	0x0800147f
 8001410:	0800147f 	.word	0x0800147f
 8001414:	0800142d 	.word	0x0800142d
 8001418:	08001441 	.word	0x08001441
 800141c:	4a79      	ldr	r2, [pc, #484]	; (8001604 <HAL_GPIO_Init+0x2b4>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d013      	beq.n	800144a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001422:	e02c      	b.n	800147e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	623b      	str	r3, [r7, #32]
          break;
 800142a:	e029      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68db      	ldr	r3, [r3, #12]
 8001430:	3304      	adds	r3, #4
 8001432:	623b      	str	r3, [r7, #32]
          break;
 8001434:	e024      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	3308      	adds	r3, #8
 800143c:	623b      	str	r3, [r7, #32]
          break;
 800143e:	e01f      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	330c      	adds	r3, #12
 8001446:	623b      	str	r3, [r7, #32]
          break;
 8001448:	e01a      	b.n	8001480 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	2b00      	cmp	r3, #0
 8001450:	d102      	bne.n	8001458 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001452:	2304      	movs	r3, #4
 8001454:	623b      	str	r3, [r7, #32]
          break;
 8001456:	e013      	b.n	8001480 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	2b01      	cmp	r3, #1
 800145e:	d105      	bne.n	800146c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001460:	2308      	movs	r3, #8
 8001462:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	69fa      	ldr	r2, [r7, #28]
 8001468:	611a      	str	r2, [r3, #16]
          break;
 800146a:	e009      	b.n	8001480 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800146c:	2308      	movs	r3, #8
 800146e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	69fa      	ldr	r2, [r7, #28]
 8001474:	615a      	str	r2, [r3, #20]
          break;
 8001476:	e003      	b.n	8001480 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001478:	2300      	movs	r3, #0
 800147a:	623b      	str	r3, [r7, #32]
          break;
 800147c:	e000      	b.n	8001480 <HAL_GPIO_Init+0x130>
          break;
 800147e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	2bff      	cmp	r3, #255	; 0xff
 8001484:	d801      	bhi.n	800148a <HAL_GPIO_Init+0x13a>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	e001      	b.n	800148e <HAL_GPIO_Init+0x13e>
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3304      	adds	r3, #4
 800148e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2bff      	cmp	r3, #255	; 0xff
 8001494:	d802      	bhi.n	800149c <HAL_GPIO_Init+0x14c>
 8001496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001498:	009b      	lsls	r3, r3, #2
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x152>
 800149c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800149e:	3b08      	subs	r3, #8
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	681a      	ldr	r2, [r3, #0]
 80014a8:	210f      	movs	r1, #15
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	fa01 f303 	lsl.w	r3, r1, r3
 80014b0:	43db      	mvns	r3, r3
 80014b2:	401a      	ands	r2, r3
 80014b4:	6a39      	ldr	r1, [r7, #32]
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	fa01 f303 	lsl.w	r3, r1, r3
 80014bc:	431a      	orrs	r2, r3
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	f000 80b1 	beq.w	8001632 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014d0:	4b4d      	ldr	r3, [pc, #308]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	4a4c      	ldr	r2, [pc, #304]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014d6:	f043 0301 	orr.w	r3, r3, #1
 80014da:	6193      	str	r3, [r2, #24]
 80014dc:	4b4a      	ldr	r3, [pc, #296]	; (8001608 <HAL_GPIO_Init+0x2b8>)
 80014de:	699b      	ldr	r3, [r3, #24]
 80014e0:	f003 0301 	and.w	r3, r3, #1
 80014e4:	60bb      	str	r3, [r7, #8]
 80014e6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80014e8:	4a48      	ldr	r2, [pc, #288]	; (800160c <HAL_GPIO_Init+0x2bc>)
 80014ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ec:	089b      	lsrs	r3, r3, #2
 80014ee:	3302      	adds	r3, #2
 80014f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	f003 0303 	and.w	r3, r3, #3
 80014fc:	009b      	lsls	r3, r3, #2
 80014fe:	220f      	movs	r2, #15
 8001500:	fa02 f303 	lsl.w	r3, r2, r3
 8001504:	43db      	mvns	r3, r3
 8001506:	68fa      	ldr	r2, [r7, #12]
 8001508:	4013      	ands	r3, r2
 800150a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	4a40      	ldr	r2, [pc, #256]	; (8001610 <HAL_GPIO_Init+0x2c0>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d013      	beq.n	800153c <HAL_GPIO_Init+0x1ec>
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	4a3f      	ldr	r2, [pc, #252]	; (8001614 <HAL_GPIO_Init+0x2c4>)
 8001518:	4293      	cmp	r3, r2
 800151a:	d00d      	beq.n	8001538 <HAL_GPIO_Init+0x1e8>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	4a3e      	ldr	r2, [pc, #248]	; (8001618 <HAL_GPIO_Init+0x2c8>)
 8001520:	4293      	cmp	r3, r2
 8001522:	d007      	beq.n	8001534 <HAL_GPIO_Init+0x1e4>
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	4a3d      	ldr	r2, [pc, #244]	; (800161c <HAL_GPIO_Init+0x2cc>)
 8001528:	4293      	cmp	r3, r2
 800152a:	d101      	bne.n	8001530 <HAL_GPIO_Init+0x1e0>
 800152c:	2303      	movs	r3, #3
 800152e:	e006      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001530:	2304      	movs	r3, #4
 8001532:	e004      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001534:	2302      	movs	r3, #2
 8001536:	e002      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 8001538:	2301      	movs	r3, #1
 800153a:	e000      	b.n	800153e <HAL_GPIO_Init+0x1ee>
 800153c:	2300      	movs	r3, #0
 800153e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001540:	f002 0203 	and.w	r2, r2, #3
 8001544:	0092      	lsls	r2, r2, #2
 8001546:	4093      	lsls	r3, r2
 8001548:	68fa      	ldr	r2, [r7, #12]
 800154a:	4313      	orrs	r3, r2
 800154c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800154e:	492f      	ldr	r1, [pc, #188]	; (800160c <HAL_GPIO_Init+0x2bc>)
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	089b      	lsrs	r3, r3, #2
 8001554:	3302      	adds	r3, #2
 8001556:	68fa      	ldr	r2, [r7, #12]
 8001558:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001564:	2b00      	cmp	r3, #0
 8001566:	d006      	beq.n	8001576 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001568:	4b2d      	ldr	r3, [pc, #180]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 800156a:	689a      	ldr	r2, [r3, #8]
 800156c:	492c      	ldr	r1, [pc, #176]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 800156e:	69bb      	ldr	r3, [r7, #24]
 8001570:	4313      	orrs	r3, r2
 8001572:	608b      	str	r3, [r1, #8]
 8001574:	e006      	b.n	8001584 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001576:	4b2a      	ldr	r3, [pc, #168]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001578:	689a      	ldr	r2, [r3, #8]
 800157a:	69bb      	ldr	r3, [r7, #24]
 800157c:	43db      	mvns	r3, r3
 800157e:	4928      	ldr	r1, [pc, #160]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001580:	4013      	ands	r3, r2
 8001582:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d006      	beq.n	800159e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001590:	4b23      	ldr	r3, [pc, #140]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001592:	68da      	ldr	r2, [r3, #12]
 8001594:	4922      	ldr	r1, [pc, #136]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 8001596:	69bb      	ldr	r3, [r7, #24]
 8001598:	4313      	orrs	r3, r2
 800159a:	60cb      	str	r3, [r1, #12]
 800159c:	e006      	b.n	80015ac <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a0:	68da      	ldr	r2, [r3, #12]
 80015a2:	69bb      	ldr	r3, [r7, #24]
 80015a4:	43db      	mvns	r3, r3
 80015a6:	491e      	ldr	r1, [pc, #120]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015a8:	4013      	ands	r3, r2
 80015aa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d006      	beq.n	80015c6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	4918      	ldr	r1, [pc, #96]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	604b      	str	r3, [r1, #4]
 80015c4:	e006      	b.n	80015d4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	69bb      	ldr	r3, [r7, #24]
 80015cc:	43db      	mvns	r3, r3
 80015ce:	4914      	ldr	r1, [pc, #80]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015d0:	4013      	ands	r3, r2
 80015d2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	685b      	ldr	r3, [r3, #4]
 80015d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d021      	beq.n	8001624 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80015e0:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	490e      	ldr	r1, [pc, #56]	; (8001620 <HAL_GPIO_Init+0x2d0>)
 80015e6:	69bb      	ldr	r3, [r7, #24]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
 80015ec:	e021      	b.n	8001632 <HAL_GPIO_Init+0x2e2>
 80015ee:	bf00      	nop
 80015f0:	10320000 	.word	0x10320000
 80015f4:	10310000 	.word	0x10310000
 80015f8:	10220000 	.word	0x10220000
 80015fc:	10210000 	.word	0x10210000
 8001600:	10120000 	.word	0x10120000
 8001604:	10110000 	.word	0x10110000
 8001608:	40021000 	.word	0x40021000
 800160c:	40010000 	.word	0x40010000
 8001610:	40010800 	.word	0x40010800
 8001614:	40010c00 	.word	0x40010c00
 8001618:	40011000 	.word	0x40011000
 800161c:	40011400 	.word	0x40011400
 8001620:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001624:	4b0b      	ldr	r3, [pc, #44]	; (8001654 <HAL_GPIO_Init+0x304>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	69bb      	ldr	r3, [r7, #24]
 800162a:	43db      	mvns	r3, r3
 800162c:	4909      	ldr	r1, [pc, #36]	; (8001654 <HAL_GPIO_Init+0x304>)
 800162e:	4013      	ands	r3, r2
 8001630:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001632:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001634:	3301      	adds	r3, #1
 8001636:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681a      	ldr	r2, [r3, #0]
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	fa22 f303 	lsr.w	r3, r2, r3
 8001642:	2b00      	cmp	r3, #0
 8001644:	f47f ae8e 	bne.w	8001364 <HAL_GPIO_Init+0x14>
  }
}
 8001648:	bf00      	nop
 800164a:	bf00      	nop
 800164c:	372c      	adds	r7, #44	; 0x2c
 800164e:	46bd      	mov	sp, r7
 8001650:	bc80      	pop	{r7}
 8001652:	4770      	bx	lr
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	689a      	ldr	r2, [r3, #8]
 8001668:	887b      	ldrh	r3, [r7, #2]
 800166a:	4013      	ands	r3, r2
 800166c:	2b00      	cmp	r3, #0
 800166e:	d002      	beq.n	8001676 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001670:	2301      	movs	r3, #1
 8001672:	73fb      	strb	r3, [r7, #15]
 8001674:	e001      	b.n	800167a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001676:	2300      	movs	r3, #0
 8001678:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800167a:	7bfb      	ldrb	r3, [r7, #15]
}
 800167c:	4618      	mov	r0, r3
 800167e:	3714      	adds	r7, #20
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001686:	b480      	push	{r7}
 8001688:	b083      	sub	sp, #12
 800168a:	af00      	add	r7, sp, #0
 800168c:	6078      	str	r0, [r7, #4]
 800168e:	460b      	mov	r3, r1
 8001690:	807b      	strh	r3, [r7, #2]
 8001692:	4613      	mov	r3, r2
 8001694:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001696:	787b      	ldrb	r3, [r7, #1]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d003      	beq.n	80016a4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800169c:	887a      	ldrh	r2, [r7, #2]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80016a2:	e003      	b.n	80016ac <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80016a4:	887b      	ldrh	r3, [r7, #2]
 80016a6:	041a      	lsls	r2, r3, #16
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	611a      	str	r2, [r3, #16]
}
 80016ac:	bf00      	nop
 80016ae:	370c      	adds	r7, #12
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bc80      	pop	{r7}
 80016b4:	4770      	bx	lr
	...

080016b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b086      	sub	sp, #24
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d101      	bne.n	80016ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016c6:	2301      	movs	r3, #1
 80016c8:	e26c      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	f000 8087 	beq.w	80017e6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016d8:	4b92      	ldr	r3, [pc, #584]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f003 030c 	and.w	r3, r3, #12
 80016e0:	2b04      	cmp	r3, #4
 80016e2:	d00c      	beq.n	80016fe <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016e4:	4b8f      	ldr	r3, [pc, #572]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	f003 030c 	and.w	r3, r3, #12
 80016ec:	2b08      	cmp	r3, #8
 80016ee:	d112      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
 80016f0:	4b8c      	ldr	r3, [pc, #560]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016fc:	d10b      	bne.n	8001716 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016fe:	4b89      	ldr	r3, [pc, #548]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d06c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x12c>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	685b      	ldr	r3, [r3, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d168      	bne.n	80017e4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e246      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171e:	d106      	bne.n	800172e <HAL_RCC_OscConfig+0x76>
 8001720:	4b80      	ldr	r3, [pc, #512]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a7f      	ldr	r2, [pc, #508]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001726:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e02e      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d10c      	bne.n	8001750 <HAL_RCC_OscConfig+0x98>
 8001736:	4b7b      	ldr	r3, [pc, #492]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a7a      	ldr	r2, [pc, #488]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800173c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001740:	6013      	str	r3, [r2, #0]
 8001742:	4b78      	ldr	r3, [pc, #480]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a77      	ldr	r2, [pc, #476]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001748:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800174c:	6013      	str	r3, [r2, #0]
 800174e:	e01d      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001758:	d10c      	bne.n	8001774 <HAL_RCC_OscConfig+0xbc>
 800175a:	4b72      	ldr	r3, [pc, #456]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4a71      	ldr	r2, [pc, #452]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001760:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001764:	6013      	str	r3, [r2, #0]
 8001766:	4b6f      	ldr	r3, [pc, #444]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	4a6e      	ldr	r2, [pc, #440]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800176c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001770:	6013      	str	r3, [r2, #0]
 8001772:	e00b      	b.n	800178c <HAL_RCC_OscConfig+0xd4>
 8001774:	4b6b      	ldr	r3, [pc, #428]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a6a      	ldr	r2, [pc, #424]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800177a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800177e:	6013      	str	r3, [r2, #0]
 8001780:	4b68      	ldr	r3, [pc, #416]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a67      	ldr	r2, [pc, #412]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001786:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800178a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b00      	cmp	r3, #0
 8001792:	d013      	beq.n	80017bc <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fcee 	bl	8001174 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800179c:	f7ff fcea 	bl	8001174 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b64      	cmp	r3, #100	; 0x64
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e1fa      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	4b5d      	ldr	r3, [pc, #372]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d0f0      	beq.n	800179c <HAL_RCC_OscConfig+0xe4>
 80017ba:	e014      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017bc:	f7ff fcda 	bl	8001174 <HAL_GetTick>
 80017c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017c2:	e008      	b.n	80017d6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017c4:	f7ff fcd6 	bl	8001174 <HAL_GetTick>
 80017c8:	4602      	mov	r2, r0
 80017ca:	693b      	ldr	r3, [r7, #16]
 80017cc:	1ad3      	subs	r3, r2, r3
 80017ce:	2b64      	cmp	r3, #100	; 0x64
 80017d0:	d901      	bls.n	80017d6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017d2:	2303      	movs	r3, #3
 80017d4:	e1e6      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	4b53      	ldr	r3, [pc, #332]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f0      	bne.n	80017c4 <HAL_RCC_OscConfig+0x10c>
 80017e2:	e000      	b.n	80017e6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f003 0302 	and.w	r3, r3, #2
 80017ee:	2b00      	cmp	r3, #0
 80017f0:	d063      	beq.n	80018ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017f2:	4b4c      	ldr	r3, [pc, #304]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80017f4:	685b      	ldr	r3, [r3, #4]
 80017f6:	f003 030c 	and.w	r3, r3, #12
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80017fe:	4b49      	ldr	r3, [pc, #292]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 030c 	and.w	r3, r3, #12
 8001806:	2b08      	cmp	r3, #8
 8001808:	d11c      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
 800180a:	4b46      	ldr	r3, [pc, #280]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001812:	2b00      	cmp	r3, #0
 8001814:	d116      	bne.n	8001844 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001816:	4b43      	ldr	r3, [pc, #268]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d005      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	691b      	ldr	r3, [r3, #16]
 8001826:	2b01      	cmp	r3, #1
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e1ba      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800182e:	4b3d      	ldr	r3, [pc, #244]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	695b      	ldr	r3, [r3, #20]
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	4939      	ldr	r1, [pc, #228]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800183e:	4313      	orrs	r3, r2
 8001840:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001842:	e03a      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691b      	ldr	r3, [r3, #16]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d020      	beq.n	800188e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800184c:	4b36      	ldr	r3, [pc, #216]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 800184e:	2201      	movs	r2, #1
 8001850:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001852:	f7ff fc8f 	bl	8001174 <HAL_GetTick>
 8001856:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001858:	e008      	b.n	800186c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800185a:	f7ff fc8b 	bl	8001174 <HAL_GetTick>
 800185e:	4602      	mov	r2, r0
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	1ad3      	subs	r3, r2, r3
 8001864:	2b02      	cmp	r3, #2
 8001866:	d901      	bls.n	800186c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001868:	2303      	movs	r3, #3
 800186a:	e19b      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	4b2d      	ldr	r3, [pc, #180]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f003 0302 	and.w	r3, r3, #2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d0f0      	beq.n	800185a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001878:	4b2a      	ldr	r3, [pc, #168]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	00db      	lsls	r3, r3, #3
 8001886:	4927      	ldr	r1, [pc, #156]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 8001888:	4313      	orrs	r3, r2
 800188a:	600b      	str	r3, [r1, #0]
 800188c:	e015      	b.n	80018ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800188e:	4b26      	ldr	r3, [pc, #152]	; (8001928 <HAL_RCC_OscConfig+0x270>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff fc6e 	bl	8001174 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800189c:	f7ff fc6a 	bl	8001174 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e17a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d03a      	beq.n	800193c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d019      	beq.n	8001902 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018ce:	4b17      	ldr	r3, [pc, #92]	; (800192c <HAL_RCC_OscConfig+0x274>)
 80018d0:	2201      	movs	r2, #1
 80018d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d4:	f7ff fc4e 	bl	8001174 <HAL_GetTick>
 80018d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018da:	e008      	b.n	80018ee <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018dc:	f7ff fc4a 	bl	8001174 <HAL_GetTick>
 80018e0:	4602      	mov	r2, r0
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	1ad3      	subs	r3, r2, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d901      	bls.n	80018ee <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e15a      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	4b0d      	ldr	r3, [pc, #52]	; (8001924 <HAL_RCC_OscConfig+0x26c>)
 80018f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f2:	f003 0302 	and.w	r3, r3, #2
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d0f0      	beq.n	80018dc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80018fa:	2001      	movs	r0, #1
 80018fc:	f000 facc 	bl	8001e98 <RCC_Delay>
 8001900:	e01c      	b.n	800193c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001902:	4b0a      	ldr	r3, [pc, #40]	; (800192c <HAL_RCC_OscConfig+0x274>)
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001908:	f7ff fc34 	bl	8001174 <HAL_GetTick>
 800190c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800190e:	e00f      	b.n	8001930 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001910:	f7ff fc30 	bl	8001174 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	2b02      	cmp	r3, #2
 800191c:	d908      	bls.n	8001930 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800191e:	2303      	movs	r3, #3
 8001920:	e140      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	42420000 	.word	0x42420000
 800192c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001930:	4b9e      	ldr	r3, [pc, #632]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001934:	f003 0302 	and.w	r3, r3, #2
 8001938:	2b00      	cmp	r3, #0
 800193a:	d1e9      	bne.n	8001910 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0304 	and.w	r3, r3, #4
 8001944:	2b00      	cmp	r3, #0
 8001946:	f000 80a6 	beq.w	8001a96 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800194a:	2300      	movs	r3, #0
 800194c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800194e:	4b97      	ldr	r3, [pc, #604]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001950:	69db      	ldr	r3, [r3, #28]
 8001952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d10d      	bne.n	8001976 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800195a:	4b94      	ldr	r3, [pc, #592]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	4a93      	ldr	r2, [pc, #588]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001960:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001964:	61d3      	str	r3, [r2, #28]
 8001966:	4b91      	ldr	r3, [pc, #580]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001968:	69db      	ldr	r3, [r3, #28]
 800196a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196e:	60bb      	str	r3, [r7, #8]
 8001970:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001972:	2301      	movs	r3, #1
 8001974:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001976:	4b8e      	ldr	r3, [pc, #568]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	2b00      	cmp	r3, #0
 8001980:	d118      	bne.n	80019b4 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001982:	4b8b      	ldr	r3, [pc, #556]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	4a8a      	ldr	r2, [pc, #552]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 8001988:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800198e:	f7ff fbf1 	bl	8001174 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001996:	f7ff fbed 	bl	8001174 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b64      	cmp	r3, #100	; 0x64
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e0fd      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	4b81      	ldr	r3, [pc, #516]	; (8001bb0 <HAL_RCC_OscConfig+0x4f8>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d0f0      	beq.n	8001996 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	68db      	ldr	r3, [r3, #12]
 80019b8:	2b01      	cmp	r3, #1
 80019ba:	d106      	bne.n	80019ca <HAL_RCC_OscConfig+0x312>
 80019bc:	4b7b      	ldr	r3, [pc, #492]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019be:	6a1b      	ldr	r3, [r3, #32]
 80019c0:	4a7a      	ldr	r2, [pc, #488]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6213      	str	r3, [r2, #32]
 80019c8:	e02d      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d10c      	bne.n	80019ec <HAL_RCC_OscConfig+0x334>
 80019d2:	4b76      	ldr	r3, [pc, #472]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d4:	6a1b      	ldr	r3, [r3, #32]
 80019d6:	4a75      	ldr	r2, [pc, #468]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019d8:	f023 0301 	bic.w	r3, r3, #1
 80019dc:	6213      	str	r3, [r2, #32]
 80019de:	4b73      	ldr	r3, [pc, #460]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e0:	6a1b      	ldr	r3, [r3, #32]
 80019e2:	4a72      	ldr	r2, [pc, #456]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019e4:	f023 0304 	bic.w	r3, r3, #4
 80019e8:	6213      	str	r3, [r2, #32]
 80019ea:	e01c      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	2b05      	cmp	r3, #5
 80019f2:	d10c      	bne.n	8001a0e <HAL_RCC_OscConfig+0x356>
 80019f4:	4b6d      	ldr	r3, [pc, #436]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019f6:	6a1b      	ldr	r3, [r3, #32]
 80019f8:	4a6c      	ldr	r2, [pc, #432]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 80019fa:	f043 0304 	orr.w	r3, r3, #4
 80019fe:	6213      	str	r3, [r2, #32]
 8001a00:	4b6a      	ldr	r3, [pc, #424]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	4a69      	ldr	r2, [pc, #420]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a06:	f043 0301 	orr.w	r3, r3, #1
 8001a0a:	6213      	str	r3, [r2, #32]
 8001a0c:	e00b      	b.n	8001a26 <HAL_RCC_OscConfig+0x36e>
 8001a0e:	4b67      	ldr	r3, [pc, #412]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a10:	6a1b      	ldr	r3, [r3, #32]
 8001a12:	4a66      	ldr	r2, [pc, #408]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a14:	f023 0301 	bic.w	r3, r3, #1
 8001a18:	6213      	str	r3, [r2, #32]
 8001a1a:	4b64      	ldr	r3, [pc, #400]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a1c:	6a1b      	ldr	r3, [r3, #32]
 8001a1e:	4a63      	ldr	r2, [pc, #396]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a20:	f023 0304 	bic.w	r3, r3, #4
 8001a24:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	68db      	ldr	r3, [r3, #12]
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d015      	beq.n	8001a5a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a2e:	f7ff fba1 	bl	8001174 <HAL_GetTick>
 8001a32:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a34:	e00a      	b.n	8001a4c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a36:	f7ff fb9d 	bl	8001174 <HAL_GetTick>
 8001a3a:	4602      	mov	r2, r0
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	1ad3      	subs	r3, r2, r3
 8001a40:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e0ab      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a4c:	4b57      	ldr	r3, [pc, #348]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a4e:	6a1b      	ldr	r3, [r3, #32]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0ee      	beq.n	8001a36 <HAL_RCC_OscConfig+0x37e>
 8001a58:	e014      	b.n	8001a84 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fb8b 	bl	8001174 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a60:	e00a      	b.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a62:	f7ff fb87 	bl	8001174 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d901      	bls.n	8001a78 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a74:	2303      	movs	r3, #3
 8001a76:	e095      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a78:	4b4c      	ldr	r3, [pc, #304]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f003 0302 	and.w	r3, r3, #2
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d1ee      	bne.n	8001a62 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d105      	bne.n	8001a96 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a8a:	4b48      	ldr	r3, [pc, #288]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a8c:	69db      	ldr	r3, [r3, #28]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001a90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a94:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	69db      	ldr	r3, [r3, #28]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	f000 8081 	beq.w	8001ba2 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001aa0:	4b42      	ldr	r3, [pc, #264]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f003 030c 	and.w	r3, r3, #12
 8001aa8:	2b08      	cmp	r3, #8
 8001aaa:	d061      	beq.n	8001b70 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	69db      	ldr	r3, [r3, #28]
 8001ab0:	2b02      	cmp	r3, #2
 8001ab2:	d146      	bne.n	8001b42 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ab4:	4b3f      	ldr	r3, [pc, #252]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aba:	f7ff fb5b 	bl	8001174 <HAL_GetTick>
 8001abe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac2:	f7ff fb57 	bl	8001174 <HAL_GetTick>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e067      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	4b35      	ldr	r3, [pc, #212]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d1f0      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6a1b      	ldr	r3, [r3, #32]
 8001ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae8:	d108      	bne.n	8001afc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001aea:	4b30      	ldr	r3, [pc, #192]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	492d      	ldr	r1, [pc, #180]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001afc:	4b2b      	ldr	r3, [pc, #172]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001afe:	685b      	ldr	r3, [r3, #4]
 8001b00:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6a19      	ldr	r1, [r3, #32]
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b0c:	430b      	orrs	r3, r1
 8001b0e:	4927      	ldr	r1, [pc, #156]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b10:	4313      	orrs	r3, r2
 8001b12:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b14:	4b27      	ldr	r3, [pc, #156]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b16:	2201      	movs	r2, #1
 8001b18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b1a:	f7ff fb2b 	bl	8001174 <HAL_GetTick>
 8001b1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b22:	f7ff fb27 	bl	8001174 <HAL_GetTick>
 8001b26:	4602      	mov	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e037      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d0f0      	beq.n	8001b22 <HAL_RCC_OscConfig+0x46a>
 8001b40:	e02f      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b42:	4b1c      	ldr	r3, [pc, #112]	; (8001bb4 <HAL_RCC_OscConfig+0x4fc>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b48:	f7ff fb14 	bl	8001174 <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b4e:	e008      	b.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b50:	f7ff fb10 	bl	8001174 <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d901      	bls.n	8001b62 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	e020      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	4b12      	ldr	r3, [pc, #72]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d1f0      	bne.n	8001b50 <HAL_RCC_OscConfig+0x498>
 8001b6e:	e018      	b.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	69db      	ldr	r3, [r3, #28]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d101      	bne.n	8001b7c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	e013      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	; (8001bac <HAL_RCC_OscConfig+0x4f4>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6a1b      	ldr	r3, [r3, #32]
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d106      	bne.n	8001b9e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d001      	beq.n	8001ba2 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e000      	b.n	8001ba4 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3718      	adds	r7, #24
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	40021000 	.word	0x40021000
 8001bb0:	40007000 	.word	0x40007000
 8001bb4:	42420060 	.word	0x42420060

08001bb8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b084      	sub	sp, #16
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0307 	and.w	r3, r3, #7
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 0207 	bic.w	r2, r3, #7
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c1e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	685b      	ldr	r3, [r3, #4]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c32:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c36:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ca8:	f7ff fa64 	bl	8001174 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7ff fa60 	bl	8001174 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0307 	and.w	r3, r3, #7
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 0207 	bic.w	r2, r3, #7
 8001cee:	4922      	ldr	r1, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1c0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1c4>)
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1c8>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1cc>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff f9c2 	bl	80010f0 <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40022000 	.word	0x40022000
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	08002304 	.word	0x08002304
 8001d84:	20000020 	.word	0x20000020
 8001d88:	20000024 	.word	0x20000024

08001d8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b087      	sub	sp, #28
 8001d90:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
 8001d96:	2300      	movs	r3, #0
 8001d98:	60bb      	str	r3, [r7, #8]
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	617b      	str	r3, [r7, #20]
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001da6:	4b1e      	ldr	r3, [pc, #120]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 030c 	and.w	r3, r3, #12
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d002      	beq.n	8001dbc <HAL_RCC_GetSysClockFreq+0x30>
 8001db6:	2b08      	cmp	r3, #8
 8001db8:	d003      	beq.n	8001dc2 <HAL_RCC_GetSysClockFreq+0x36>
 8001dba:	e027      	b.n	8001e0c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001dbc:	4b19      	ldr	r3, [pc, #100]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dbe:	613b      	str	r3, [r7, #16]
      break;
 8001dc0:	e027      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	4a17      	ldr	r2, [pc, #92]	; (8001e28 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001dcc:	5cd3      	ldrb	r3, [r2, r3]
 8001dce:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d010      	beq.n	8001dfc <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001dda:	4b11      	ldr	r3, [pc, #68]	; (8001e20 <HAL_RCC_GetSysClockFreq+0x94>)
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	0c5b      	lsrs	r3, r3, #17
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	4a11      	ldr	r2, [pc, #68]	; (8001e2c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001de6:	5cd3      	ldrb	r3, [r2, r3]
 8001de8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a0d      	ldr	r2, [pc, #52]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001dee:	fb02 f203 	mul.w	r2, r2, r3
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df8:	617b      	str	r3, [r7, #20]
 8001dfa:	e004      	b.n	8001e06 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001e00:	fb02 f303 	mul.w	r3, r2, r3
 8001e04:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	613b      	str	r3, [r7, #16]
      break;
 8001e0a:	e002      	b.n	8001e12 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e0c:	4b05      	ldr	r3, [pc, #20]	; (8001e24 <HAL_RCC_GetSysClockFreq+0x98>)
 8001e0e:	613b      	str	r3, [r7, #16]
      break;
 8001e10:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e12:	693b      	ldr	r3, [r7, #16]
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	371c      	adds	r7, #28
 8001e18:	46bd      	mov	sp, r7
 8001e1a:	bc80      	pop	{r7}
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	40021000 	.word	0x40021000
 8001e24:	007a1200 	.word	0x007a1200
 8001e28:	0800231c 	.word	0x0800231c
 8001e2c:	0800232c 	.word	0x0800232c
 8001e30:	003d0900 	.word	0x003d0900

08001e34 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e34:	b480      	push	{r7}
 8001e36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e38:	4b02      	ldr	r3, [pc, #8]	; (8001e44 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e3a:	681b      	ldr	r3, [r3, #0]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bc80      	pop	{r7}
 8001e42:	4770      	bx	lr
 8001e44:	20000020 	.word	0x20000020

08001e48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e4c:	f7ff fff2 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e50:	4602      	mov	r2, r0
 8001e52:	4b05      	ldr	r3, [pc, #20]	; (8001e68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	0a1b      	lsrs	r3, r3, #8
 8001e58:	f003 0307 	and.w	r3, r3, #7
 8001e5c:	4903      	ldr	r1, [pc, #12]	; (8001e6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e5e:	5ccb      	ldrb	r3, [r1, r3]
 8001e60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40021000 	.word	0x40021000
 8001e6c:	08002314 	.word	0x08002314

08001e70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001e74:	f7ff ffde 	bl	8001e34 <HAL_RCC_GetHCLKFreq>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	4b05      	ldr	r3, [pc, #20]	; (8001e90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	0adb      	lsrs	r3, r3, #11
 8001e80:	f003 0307 	and.w	r3, r3, #7
 8001e84:	4903      	ldr	r1, [pc, #12]	; (8001e94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e86:	5ccb      	ldrb	r3, [r1, r3]
 8001e88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	bd80      	pop	{r7, pc}
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08002314 	.word	0x08002314

08001e98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	; (8001ecc <RCC_Delay+0x34>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <RCC_Delay+0x38>)
 8001ea6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eaa:	0a5b      	lsrs	r3, r3, #9
 8001eac:	687a      	ldr	r2, [r7, #4]
 8001eae:	fb02 f303 	mul.w	r3, r2, r3
 8001eb2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001eb4:	bf00      	nop
  }
  while (Delay --);
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1e5a      	subs	r2, r3, #1
 8001eba:	60fa      	str	r2, [r7, #12]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d1f9      	bne.n	8001eb4 <RCC_Delay+0x1c>
}
 8001ec0:	bf00      	nop
 8001ec2:	bf00      	nop
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr
 8001ecc:	20000020 	.word	0x20000020
 8001ed0:	10624dd3 	.word	0x10624dd3

08001ed4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e042      	b.n	8001f6c <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d106      	bne.n	8001f00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001efa:	6878      	ldr	r0, [r7, #4]
 8001efc:	f7ff f842 	bl	8000f84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2224      	movs	r2, #36	; 0x24
 8001f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	68da      	ldr	r2, [r3, #12]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	f000 f91d 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	691a      	ldr	r2, [r3, #16]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	695a      	ldr	r2, [r3, #20]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	2220      	movs	r2, #32
 8001f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}

08001f74 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af02      	add	r7, sp, #8
 8001f7a:	60f8      	str	r0, [r7, #12]
 8001f7c:	60b9      	str	r1, [r7, #8]
 8001f7e:	603b      	str	r3, [r7, #0]
 8001f80:	4613      	mov	r3, r2
 8001f82:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b20      	cmp	r3, #32
 8001f92:	d16d      	bne.n	8002070 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d002      	beq.n	8001fa0 <HAL_UART_Transmit+0x2c>
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d101      	bne.n	8001fa4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e066      	b.n	8002072 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	2221      	movs	r2, #33	; 0x21
 8001fae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001fb2:	f7ff f8df 	bl	8001174 <HAL_GetTick>
 8001fb6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	88fa      	ldrh	r2, [r7, #6]
 8001fbc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	88fa      	ldrh	r2, [r7, #6]
 8001fc2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001fcc:	d108      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	691b      	ldr	r3, [r3, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d104      	bne.n	8001fe0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	61bb      	str	r3, [r7, #24]
 8001fde:	e003      	b.n	8001fe8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001fe8:	e02a      	b.n	8002040 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	9300      	str	r3, [sp, #0]
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	2180      	movs	r1, #128	; 0x80
 8001ff4:	68f8      	ldr	r0, [r7, #12]
 8001ff6:	f000 f840 	bl	800207a <UART_WaitOnFlagUntilTimeout>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002000:	2303      	movs	r3, #3
 8002002:	e036      	b.n	8002072 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d10b      	bne.n	8002022 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	881b      	ldrh	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002018:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	3302      	adds	r3, #2
 800201e:	61bb      	str	r3, [r7, #24]
 8002020:	e007      	b.n	8002032 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	3301      	adds	r3, #1
 8002030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002036:	b29b      	uxth	r3, r3
 8002038:	3b01      	subs	r3, #1
 800203a:	b29a      	uxth	r2, r3
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002044:	b29b      	uxth	r3, r3
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1cf      	bne.n	8001fea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	2200      	movs	r2, #0
 8002052:	2140      	movs	r1, #64	; 0x40
 8002054:	68f8      	ldr	r0, [r7, #12]
 8002056:	f000 f810 	bl	800207a <UART_WaitOnFlagUntilTimeout>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d001      	beq.n	8002064 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e006      	b.n	8002072 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	2220      	movs	r2, #32
 8002068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 800206c:	2300      	movs	r3, #0
 800206e:	e000      	b.n	8002072 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002070:	2302      	movs	r3, #2
  }
}
 8002072:	4618      	mov	r0, r3
 8002074:	3720      	adds	r7, #32
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}

0800207a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b090      	sub	sp, #64	; 0x40
 800207e:	af00      	add	r7, sp, #0
 8002080:	60f8      	str	r0, [r7, #12]
 8002082:	60b9      	str	r1, [r7, #8]
 8002084:	603b      	str	r3, [r7, #0]
 8002086:	4613      	mov	r3, r2
 8002088:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800208a:	e050      	b.n	800212e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800208c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800208e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002092:	d04c      	beq.n	800212e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002094:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002096:	2b00      	cmp	r3, #0
 8002098:	d007      	beq.n	80020aa <UART_WaitOnFlagUntilTimeout+0x30>
 800209a:	f7ff f86b 	bl	8001174 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d241      	bcs.n	800212e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	330c      	adds	r3, #12
 80020b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020b4:	e853 3f00 	ldrex	r3, [r3]
 80020b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80020c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	330c      	adds	r3, #12
 80020c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80020ca:	637a      	str	r2, [r7, #52]	; 0x34
 80020cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80020d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d2:	e841 2300 	strex	r3, r2, [r1]
 80020d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80020d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1e5      	bne.n	80020aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	3314      	adds	r3, #20
 80020e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	e853 3f00 	ldrex	r3, [r3]
 80020ec:	613b      	str	r3, [r7, #16]
   return(result);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	f023 0301 	bic.w	r3, r3, #1
 80020f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	3314      	adds	r3, #20
 80020fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80020fe:	623a      	str	r2, [r7, #32]
 8002100:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002102:	69f9      	ldr	r1, [r7, #28]
 8002104:	6a3a      	ldr	r2, [r7, #32]
 8002106:	e841 2300 	strex	r3, r2, [r1]
 800210a:	61bb      	str	r3, [r7, #24]
   return(result);
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d1e5      	bne.n	80020de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	2220      	movs	r2, #32
 8002116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	2220      	movs	r2, #32
 800211e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2200      	movs	r2, #0
 8002126:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 800212a:	2303      	movs	r3, #3
 800212c:	e00f      	b.n	800214e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68bb      	ldr	r3, [r7, #8]
 8002136:	4013      	ands	r3, r2
 8002138:	68ba      	ldr	r2, [r7, #8]
 800213a:	429a      	cmp	r2, r3
 800213c:	bf0c      	ite	eq
 800213e:	2301      	moveq	r3, #1
 8002140:	2300      	movne	r3, #0
 8002142:	b2db      	uxtb	r3, r3
 8002144:	461a      	mov	r2, r3
 8002146:	79fb      	ldrb	r3, [r7, #7]
 8002148:	429a      	cmp	r2, r3
 800214a:	d09f      	beq.n	800208c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800214c:	2300      	movs	r3, #0
}
 800214e:	4618      	mov	r0, r3
 8002150:	3740      	adds	r7, #64	; 0x40
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}
	...

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2c      	ldr	r2, [pc, #176]	; (800226c <UART_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff fe56 	bl	8001e70 <HAL_RCC_GetPCLK2Freq>
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	e002      	b.n	80021ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021c8:	f7ff fe3e 	bl	8001e48 <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a22      	ldr	r2, [pc, #136]	; (8002270 <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	0119      	lsls	r1, r3, #4
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f2f3 	udiv	r2, r2, r3
 8002204:	4b1a      	ldr	r3, [pc, #104]	; (8002270 <UART_SetConfig+0x118>)
 8002206:	fba3 0302 	umull	r0, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2064      	movs	r0, #100	; 0x64
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	; 0x32
 8002218:	4a15      	ldr	r2, [pc, #84]	; (8002270 <UART_SetConfig+0x118>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002224:	4419      	add	r1, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	; (8002270 <UART_SetConfig+0x118>)
 800223e:	fba3 0302 	umull	r0, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2064      	movs	r0, #100	; 0x64
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	; 0x32
 8002250:	4a07      	ldr	r2, [pc, #28]	; (8002270 <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	440a      	add	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013800 	.word	0x40013800
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <__libc_init_array>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	2600      	movs	r6, #0
 8002278:	4d0c      	ldr	r5, [pc, #48]	; (80022ac <__libc_init_array+0x38>)
 800227a:	4c0d      	ldr	r4, [pc, #52]	; (80022b0 <__libc_init_array+0x3c>)
 800227c:	1b64      	subs	r4, r4, r5
 800227e:	10a4      	asrs	r4, r4, #2
 8002280:	42a6      	cmp	r6, r4
 8002282:	d109      	bne.n	8002298 <__libc_init_array+0x24>
 8002284:	f000 f822 	bl	80022cc <_init>
 8002288:	2600      	movs	r6, #0
 800228a:	4d0a      	ldr	r5, [pc, #40]	; (80022b4 <__libc_init_array+0x40>)
 800228c:	4c0a      	ldr	r4, [pc, #40]	; (80022b8 <__libc_init_array+0x44>)
 800228e:	1b64      	subs	r4, r4, r5
 8002290:	10a4      	asrs	r4, r4, #2
 8002292:	42a6      	cmp	r6, r4
 8002294:	d105      	bne.n	80022a2 <__libc_init_array+0x2e>
 8002296:	bd70      	pop	{r4, r5, r6, pc}
 8002298:	f855 3b04 	ldr.w	r3, [r5], #4
 800229c:	4798      	blx	r3
 800229e:	3601      	adds	r6, #1
 80022a0:	e7ee      	b.n	8002280 <__libc_init_array+0xc>
 80022a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80022a6:	4798      	blx	r3
 80022a8:	3601      	adds	r6, #1
 80022aa:	e7f2      	b.n	8002292 <__libc_init_array+0x1e>
 80022ac:	08002330 	.word	0x08002330
 80022b0:	08002330 	.word	0x08002330
 80022b4:	08002330 	.word	0x08002330
 80022b8:	08002334 	.word	0x08002334

080022bc <memset>:
 80022bc:	4603      	mov	r3, r0
 80022be:	4402      	add	r2, r0
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d100      	bne.n	80022c6 <memset+0xa>
 80022c4:	4770      	bx	lr
 80022c6:	f803 1b01 	strb.w	r1, [r3], #1
 80022ca:	e7f9      	b.n	80022c0 <memset+0x4>

080022cc <_init>:
 80022cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022ce:	bf00      	nop
 80022d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022d2:	bc08      	pop	{r3}
 80022d4:	469e      	mov	lr, r3
 80022d6:	4770      	bx	lr

080022d8 <_fini>:
 80022d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80022da:	bf00      	nop
 80022dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80022de:	bc08      	pop	{r3}
 80022e0:	469e      	mov	lr, r3
 80022e2:	4770      	bx	lr
